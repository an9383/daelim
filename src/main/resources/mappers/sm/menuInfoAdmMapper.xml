<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  	
<mapper namespace="mes.mappers.sm.menuInfoAdmMapper">

<resultMap id="MenuInfoAdmVo" type="mes.domain.sm.MenuInfoAdmVo">
	
	<result property="menuId"			column="MENU_ID"		/>
	<result property="upperMenuId"		column="UPPER_MENU_ID"	/>
	<result property="menuNm"			column="MENU_NM"		/>
	<result property="menuPath"			column="MENU_PATH"		/>
	<result property="regId"			column="REG_ID"			/>
	<result property="regDate"			column="REG_DATE"		/>
	<result property="updId"			column="UPD_ID"			/>
	<result property="updDate"			column="UPD_DATE"		/>	
	<result property="depthFullPath"	column="DEPTH_FULLPATH" />	
	<result property="userNumber"		column="USER_NUMBER" 	/>		
	<result property="useYn"			column="USE_YN" 		/>
	<result property="mainGubun"		column="MAIN_GUBUN" 	/>
	<result property="menuOrder"		column="MENU_ORDER" 	/>
	
	<result property="adminCheck"		column="ADMIN_CHECK" 	/>	
	<result property="beforeMenuId"		column="BEFORE_MENU_ID" />	
	<result property="updateCheckCnt"	column="UPDATE_CHECK_CNT" />	
	
</resultMap>

	<select id="listAll" resultMap="MenuInfoAdmVo">
  		SELECT	MENU_ID
			,UPPER_MENU_ID
			,MENU_NM
			,MENU_PATH
			,MENU_ORDER
			,REG_ID
			,REG_DATE
			,UPD_ID
			,UPD_DATE
		FROM	TB_MENU_INFO_ADM 
	</select>
	
	<select id="readUpperMenu" resultMap="MenuInfoAdmVo">
  		SELECT	MENU_ID
			,UPPER_MENU_ID
			,MENU_NM
			,MENU_PATH
			,MENU_ORDER
			,REG_ID
			,REG_DATE
			,UPD_ID
			,UPD_DATE
		FROM	TB_MENU_INFO_ADM 
		WHERE UPPER_MENU_ID is null
		ORDER BY MENU_ORDER
	</select>
	
	<select id="readSubMenu" resultMap="MenuInfoAdmVo">
  		SELECT	MENU_ID
			,UPPER_MENU_ID
			,MENU_NM
			,MENU_PATH
			,MENU_ORDER
			,USE_YN
			,MAIN_GUBUN
			,REG_ID
			,REG_DATE
			,UPD_ID
			,UPD_DATE
		FROM	TB_MENU_INFO_ADM 
		WHERE UPPER_MENU_ID = #{upperMenuId}
		ORDER BY MENU_ORDER
	</select>
	
	<select id="subMenu" resultMap="MenuInfoAdmVo">
  		SELECT	MENU_ID
			,UPPER_MENU_ID
			,MENU_NM
			,MENU_PATH
			,MENU_ORDER
			,MAIN_GUBUN
			,REG_ID
			,REG_DATE
			,UPD_ID
			,UPD_DATE
		FROM	TB_MENU_INFO_ADM 
		WHERE UPPER_MENU_ID is not null
		<if test='adminCheck != "Y"'>
			AND (USE_YN != 'Y' OR USE_YN is null)
		</if>
		ORDER BY MENU_ORDER
	</select>
	
	<select id="read" resultMap="MenuInfoAdmVo">
  		SELECT	MENU_ID
			,UPPER_MENU_ID
			,MENU_NM
			,MENU_PATH
			,MENU_ORDER
			,MAIN_GUBUN
			,REG_ID
			,REG_DATE
			,UPD_ID
			,UPD_DATE
		FROM	TB_MENU_INFO_ADM 
		WHERE MENU_ID= #{menuId}
		ORDER BY MENU_ID
	</select>
	
	<!-- 메뉴순서 조회 -->
	<select id="menuInfoAdmSelByMenuOrder" resultType="String">
		SELECT ISNULL(MAX(MENU_ORDER)+1, 1)
		FROM TB_MENU_INFO_ADM
		WHERE 1=1
		<if test="upperMenuId!=null and !upperMenuId.equals('')">
		AND UPPER_MENU_ID = #{upperMenuId}
		</if>
		<if test="upperMenuId==null or upperMenuId.equals('')">
		AND UPPER_MENU_ID IS NULL
		</if>
	</select>
	
	<insert id="create">
		INSERT INTO TB_MENU_INFO_ADM(
			MENU_ID
			,UPPER_MENU_ID
			,MENU_NM
			,MENU_PATH
			,MENU_ORDER
			,USE_YN
			,MAIN_GUBUN
			,REG_ID
			,REG_DATE
			
		) 
		VALUES(
			#{menuId}
			,#{upperMenuId}
			,#{menuNm}
			,#{menuPath}
			,#{menuOrder}
			,#{useYn}
			,#{mainGubun}
			,#{regId}
			,GETDATE()
			
		)
		
	</insert>
	
		
	<select id="update">
		UPDATE	TB_MENU_INFO_ADM
		<set>
			MENU_ID = #{menuId}
			,MENU_NM = #{menuNm}
			<if test="upperMenuId!=null and !upperMenuId.equals('')">
			,UPPER_MENU_ID = #{upperMenuId}
			</if>
			<if test="menuPath!=null and !menuPath.equals('')">
			,MENU_PATH = #{menuPath}	
			</if>
			<if test="menuOrder!=null and !menuOrder.equals('')">
			,MENU_ORDER = #{menuOrder}	
			</if>
			<if test="mainGubun!=null and !mainGubun.equals('')">
			,MAIN_GUBUN = #{mainGubun}	
			</if>
		</set> 
			,USE_YN = #{useYn}	
			,UPD_ID = #{updId}
			,UPD_DATE = getdate()
		WHERE	MENU_ID = #{beforeMenuId}
	</select>
	
	<select id="updateCheck" resultMap="MenuInfoAdmVo">
		SELECT COUNT(MENU_ID) AS UPDATE_CHECK_CNT
		FROM TB_MENU_INFO_ADM 
		WHERE MENU_ID = #{menuId}
	</select>
	
	
	<!--메뉴 삭제-->
	<delete id="menuInfoDelete">
		DELETE 
		FROM TB_MENU_INFO_ADM
		WHERE MENU_ID = #{menuId}
		<if test="upperMenuId == null or upperMenuId ==''">
			OR UPPER_MENU_ID = #{menuId}
		</if>
	</delete>
	<!--사용자 권한 삭제-->
	<delete id="menuAuthDelete">
		DELETE 
		FROM TB_MENU_AUTH
		WHERE MENU_ID = #{menuId}
		<if test="userNumber != '' and userNumber != null "> 
			AND USER_NUMBER != #{userNumber}
		</if>
	</delete>
	
	<insert id="menuAuthCreate" >
		INSERT INTO TB_MENU_AUTH(
			 MENU_ID 
			,DEPARTMENT_CD
			,USER_NUMBER 
			,GRADE_CD 
			,USE_YN 
			,MAIN_GUBUN
			,REG_ID 
			,REG_DATE 
			,UPD_ID 
			,UPD_DATE
			
		) 
		VALUES(
			#{menuId}
			,#{departmentCd}
			,#{userNumber}
			,#{gradeCd}
			,#{useYnCd}
			,#{mainGubun}
			,#{regId}
			,GETDATE()
			,#{updId}
			,GETDATE()
		)
		
	</insert>
	
	<select id="selectMenuIdSeq" resultType="String">
		SELECT 'M' + ISNULL(RIGHT('00000' + CAST(MAX(SUBSTRING(MENU_ID,2,6))+1 AS NVARCHAR),5), '00001') FROM TB_MENU_INFO_ADM
	</select>
	
	
	<select id="menuInfo" resultMap="MenuInfoAdmVo">
		WITH TREE_QUERY 
		     AS (
		     	SELECT A.MENU_ID, 
		                A.UPPER_MENU_ID, 
		                A.MENU_NM, 
						A.MENU_ORDER,
						A.MAIN_GUBUN,
		                CONVERT(VARCHAR(255), A.MENU_ID)   SORT, 
		                CONVERT(VARCHAR(255), A.MENU_NM) DEPTH_FULLPATH, 
		            A.MENU_PATH
		         FROM TB_MENU_INFO_ADM A
		         WHERE  A.MENU_ID IN (SELECT DISTINCT A.UPPER_MENU_ID
		             FROM   TB_MENU_INFO_ADM A,
		            TB_MENU_AUTH B
		             WHERE 1=1
		               AND  (B.DEPARTMENT_CD = #{departmentCd} OR B.USER_NUMBER = #{userNumber})
		               AND A.MENU_ID = B.MENU_ID
					   AND A.UPPER_MENU_ID IS NOT NULL)
		         UNION ALL 
		         SELECT B.MENU_ID, 
		                B.UPPER_MENU_ID, 
		                B.MENU_NM, 
						B.MENU_ORDER,
						B.MAIN_GUBUN,
		                CONVERT(VARCHAR(255), CONVERT(NVARCHAR, C.SORT) + ' > ' 
		                                      + CONVERT(VARCHAR(255), B.MENU_ID))   SORT, 
		                CONVERT(VARCHAR(255), CONVERT(NVARCHAR, C.DEPTH_FULLPATH) + 
		                                      ' > ' 
		                                      + CONVERT(VARCHAR(255), B.MENU_NM)) 
		                DEPTH_FULLPATH,
		            B.MENU_PATH 
		         FROM (SELECT  A.MENU_ID,
		               A.UPPER_MENU_ID,
		               A.MENU_NM,
					   A.MENU_ORDER,
					   A.MAIN_GUBUN,
		               A.MENU_PATH
		             FROM   TB_MENU_INFO_ADM A,
		            TB_MENU_AUTH B
		             WHERE 1=1 
		               AND  (B.DEPARTMENT_CD = #{departmentCd} OR B.USER_NUMBER = #{userNumber})
		               AND A.MENU_ID = B.MENU_ID
		               AND (A.USE_YN != 'Y' OR A.USE_YN IS NULL) )  B, 
		                TREE_QUERY C 
		         WHERE  B.UPPER_MENU_ID = C.MENU_ID) 
		SELECT DISTINCT MENU_ID, 
		       UPPER_MENU_ID, 
		       MENU_NM, 
			   MENU_ORDER,
			   MAIN_GUBUN,
		       DEPTH_FULLPATH,
		      MENU_PATH 
		FROM   TREE_QUERY 
		ORDER BY MENU_ORDER ASC

	</select>
	<select id="menuInfoAdmin" resultMap="MenuInfoAdmVo">
		WITH TREE_QUERY 
		     AS (
		     	SELECT A.MENU_ID, 
		                A.UPPER_MENU_ID, 
		                A.MENU_NM, 
						A.MENU_ORDER,
						 A.MAIN_GUBUN,
		                CONVERT(VARCHAR(255), A.MENU_ID)   SORT, 
		                CONVERT(VARCHAR(255), A.MENU_NM) DEPTH_FULLPATH, 
		            A.MENU_PATH
		         FROM TB_MENU_INFO_ADM A
		         WHERE  A.MENU_ID IN (SELECT DISTINCT A.UPPER_MENU_ID
		             FROM   TB_MENU_INFO_ADM A,
		            TB_MENU_AUTH B
		             WHERE 1=1
		               AND A.MENU_ID = B.MENU_ID
					   AND A.UPPER_MENU_ID IS NOT NULL)
		         UNION ALL 
		         SELECT B.MENU_ID, 
		                B.UPPER_MENU_ID, 
		                B.MENU_NM, 
						B.MENU_ORDER,
						 B.MAIN_GUBUN,
		                CONVERT(VARCHAR(255), CONVERT(NVARCHAR, C.SORT) + ' > ' 
		                                      + CONVERT(VARCHAR(255), B.MENU_ID))   SORT, 
		                CONVERT(VARCHAR(255), CONVERT(NVARCHAR, C.DEPTH_FULLPATH) + 
		                                      ' > ' 
		                                      + CONVERT(VARCHAR(255), B.MENU_NM)) 
		                DEPTH_FULLPATH,
		            B.MENU_PATH 
		         FROM (SELECT  A.MENU_ID,
		               A.UPPER_MENU_ID,
		               A.MENU_NM,
					   A.MENU_ORDER,
					   A.MAIN_GUBUN,
		               A.MENU_PATH  
		             FROM   TB_MENU_INFO_ADM A,
		            TB_MENU_AUTH B
		             WHERE 1=1 
		               AND  (B.DEPARTMENT_CD = #{departmentCd} OR B.USER_NUMBER = #{userNumber})
		               AND A.MENU_ID = B.MENU_ID)  B, 
		                TREE_QUERY C 
		         WHERE  B.UPPER_MENU_ID = C.MENU_ID) 
		SELECT DISTINCT MENU_ID, 
		       UPPER_MENU_ID, 
		       MENU_NM, 
			   MENU_ORDER,
			   MAIN_GUBUN,
		       DEPTH_FULLPATH,
		      MENU_PATH 
		FROM   TREE_QUERY 
		ORDER BY MENU_ORDER ASC

	</select>
	
	<!-- 사용자메뉴관리 - 전체 데이터 엑셀조회 -->
	<select id="menuExcelDownloadList" resultMap="MenuInfoAdmVo">
  		SELECT
			MENU_ID, UPPER_MENU_ID, MENU_NM, MENU_PATH, MENU_ORDER, 'Y' USE_YN
		FROM TB_MENU_INFO_ADM
		WHERE UPPER_MENU_ID IS NULL --ADM 메뉴 데이터
		
		UNION ALL
		
		SELECT
			MENU_ID, UPPER_MENU_ID, MENU_NM, MENU_PATH, MENU_ORDER, 'Y' USE_YN
		FROM TB_MENU_INFO_ADM
		WHERE UPPER_MENU_ID IS NOT NULL --DTL 메뉴 데이터
		AND USE_YN != 'Y' --사용중인 메뉴들만 조회
	</select>
	
</mapper>