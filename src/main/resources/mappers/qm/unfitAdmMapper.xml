<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  	
<mapper namespace="mes.mappers.qm.unfitAdmMapper">

	<resultMap id="UnfitAdmVo" type="mes.domain.qm.UnfitAdmVo">
		<result property="idx"					column="IDX"	            />
		<result property="unfitNo"				column="UNFIT_NO"			/>
		<result property="unfitGubun"			column="UNFIT_GUBUN"		/>
		<result property="unfitLot"				column="UNFIT_LOT"			/>
		<result property="unfitProc"			column="UNFIT_PROC"			/> <!-- 부적합처리 -->
		<result property="unfitDate"			column="UNFIT_DATE"			/> <!-- 폐기일자 -->
		<result property="unfitManager"			column="UNFIT_MANAGER"		/>
		<result property="cmApproDate"			column="CM_APPRO_DATE"		/>
		<result property="cmComplDate"			column="CM_COMPL_DATE"		/>
		<result property="unfitDesc"			column="UNFIT_DESC"			/> <!-- 비고 -->
		<result property="regId"				column="REG_ID"				/>
		<result property="regDate"				column="REG_DATE"			/>
		<result property="updId"				column="UPD_ID"				/>
		<result property="updDate"				column="UPD_DATE"			/>
		
		<!-- 추가사항 -->
		<result property="inspectDate"			column="INSPECT_DATE"		/> <!-- 발생일자 -->
		<result property="attribPlace"			column="ATTRIB_PLACE"		/> <!-- 귀책처 -->
		<result property="generateProc"			column="GENERATE_PROC"		/> <!-- 발생공정 -->
		<result property="modelNm"				column="MODEL_NM"			/> <!-- 모델명 -->
		<result property="itemCd"				column="ITEM_CD"			/> <!-- 부품명 -->
		<result property="itemNm"				column="ITEM_NM"			/> <!-- 부품명 -->
		<result property="faultyCd"				column="FAULTY_CD"			/> <!-- 불량코드 -->
		<result property="faultyDtl"			column="FAULTY_DTL"			/> <!-- 불량내역 -->
		<result property="lotNo"				column="LOT_NO"				/> <!-- LOT NO -->
		<result property="lotCount"				column="LOT_COUNT"			/> <!-- LOT 수 -->
		<result property="faultyCnt"			column="FAULTY_CNT"			/> <!-- 불량수 -->
		<result property="initFaultyCnt"		column="INIT_FAULTY_CNT"	/> <!-- 초기허용불량수 -->
		<result property="etFaultyCnt"			column="ET_FAULTY_CNT"		/> <!-- 공정불량수 -->
		<result property="unfitProcNm"			column="UNFIT_PROC_NM"		/>
		<result property="itemModel"			column="ITEM_MODEL"			/>
		<result property="itemModelNm"			column="ITEM_MODEL_NM"			/>
		<result property="itemCus"				column="ITEM_CUS"			/>
		<result property="itemCusNm"			column="ITEM_CUS_NM"			/>
		<result property="inSlipNo"				column="IN_SLIP_NO"			/>
		<result property="inSlipSeq"			column="IN_SLIP_SEQ"		/>
		<result property="itemSeq"				column="ITEM_SEQ"			/>
		
		<result property="faultyCavity"			column="FAULTY_CAVITY"		/>
		<result property="faultyQty"			column="FAULTY_QTY"			/>
		<result property="ordLotNo"				column="ORD_LOT_NO"			/>
		<result property="mainGubun"			column="MAIN_GUBUN"			/>
		<result property="minorPrcssCd"			column="MINOR_PRCSS_CD"		/>
		<result property="fairQty"				column="FAIR_QTY"		/>
		<result property="faultyQtySum"			column="FAULTY_QTY_SUM"		/>

		<result property="unfitPairCnt"			column="UNFIT_PAIR_CNT"		/>
		<result property="unfitFaultyCnt"		column="UNFIT_FAULTY_CNT"		/>
		<result property="unfitOtherCnt"		column="UNFIT_OTHER_CNT"		/>
		<result property="unfitFaultyDate"		column="UNFIT_FAULTY_DATE"		/>
		<result property="unfitResultNo"		column="UNFIT_RESULT_NO"		/>
		<result property="unfitFaultyChargr"	column="UNFIT_FAULTY_CHARGR"		/>
		<result property="unfitFaultyChargrNm"	column="UNFIT_FAULTY_CHARGR_NM"		/>
		<result property="unfitDesc"			column="UNFIT_DESC"		/>
		<result property="faultyQtyWhole"		column="FAULTY_QTY_WHOLE"		/>
		<result property="itemUnitNm"			column="ITEM_UNIT_NM"		/>

		<result property="mainGubunNm"			column="MAIN_GUBUN_NM"		/>
		<result property="spCd"					column="SP_CD"				/>
		<result property="spNm"					column="SP_NM"				/>
		<result property="spType"				column="SP_TYPE"			/>
		<result property="spTypeNm"				column="SP_TYPE_NM"			/>
		<result property="itemColor"			column="ITEM_COLOR"			/>
		<result property="itemMaker"			column="ITEM_MAKER"			/>
		<result property="locationNo"			column="LOCATION_NO"		/>
		<result property="locationCd"			column="LOCATION_CD"		/>
		<result property="locationNm"			column="LOCATION_NM"		/>
		<result property="areaCd"				column="AREA_CD"			/>
		<result property="areaNm"				column="AREA_NM"			/>
		<result property="floorNm"				column="FLOOR_NM"			/>
		<result property="spUnit"				column="SP_UNIT"			/>
		<result property="tmQty"				column="TM_QTY"				/>
		<result property="inQty"				column="IN_QTY"				/>
		<result property="outQty"				column="OUT_QTY"			/>
		<result property="realQty"				column="REAL_QTY"			/>
		<result property="itemCost"				column="ITEM_COST"			/>
		<result property="realQtyCost"			column="REAL_QTY_COST"		/>
		<result property="barcodeNo"			column="BARCODE_NO"			/>
		<result property="unfitResultIdx"		column="UNFIT_RESULT_IDX"	/>
	</resultMap>
	
	<!-- 부적합관리대장(수입) 목록조회 -->
	<select id="unfitInspectAdmList" resultMap="UnfitAdmVo">
		SELECT
			IIA_TB.IN_SLIP_NO
			, IIA_TB.IN_SLIP_SEQ 
			, IINA_TB.MAIN_GUBUN
			, IIMA_TB.INSPECT_DATE
			, IINA_TB.ITEM_CUS 
			, (SELECT DEAL_CORP_NM FROM TB_DEAL_CORP_ADM X WHERE X.DEAL_CORP_CD = IINA_TB.ITEM_CUS) ITEM_CUS_NM 
			, IINA_TB.ITEM_MODEL
			, (SELECT BASE_NM FROM TB_COMMON_CODE_ADM H WHERE H.BASE_CD = IINA_TB.ITEM_MODEL AND H.BASE_GROUP_CD = '099' ) ITEM_MODEL_NM
			, (SELECT BASE_NM FROM TB_COMMON_CODE_ADM X WHERE X.BASE_CD = IINA_TB.ITEM_UNIT AND X.BASE_GROUP_CD = '036') ITEM_UNIT_NM
			, IINA_TB.ITEM_CD
			, IINA_TB.ITEM_NM
			, IINA_TB.ITEM_SEQ 
			, IFA_TB.FAULTY_TYPE_CD FAULTY_CD
			, (SELECT BASE_INFO_NM FROM TB_BASE_INFO_ADM X WHERE X.BASE_INFO_TYPE='FT' AND X.BASE_INFO_CD=IFA_TB.FAULTY_TYPE_CD) FAULTY_DTL
			, IOWA_TB.BARCODE_NO LOT_NO
			, ISNULL(D.PRE_IN_WHS_QTY, 0) FAIR_QTY
			, ISNULL(IFA_TB.FAULTY_TYPE_QTY, 0) FAULTY_QTY
			, IIA_SUB.FAULTY_QTY_SUM
			, UA_TB.UNFIT_NO
			, UA_TB.UNFIT_LOT
			, UA_TB.CM_APPRO_DATE 
			, UA_TB.CM_COMPL_DATE
			, UA_TB.UNFIT_DESC
			, IOWA_TB.APPROVAL_CD
			, IIF(URA.UNFIT_RESULT_NO IS NOT NULL, '등록', '미등록') UNFIT_RESULT_NO
			, IIFT_ALL.FAULTY_QTY_WHOLE
			, URA.UNFIT_PAIR_CNT
			, URA.UNFIT_FAULTY_CNT
			, URA.UNFIT_OTHER_CNT
			, (SELECT BASE_NM FROM TB_COMMON_CODE_ADM X WHERE X.BASE_CD = URA.UNFIT_PROC AND X.BASE_GROUP_CD = '156') UNFIT_PROC_NM
			, URA.UNFIT_FAULTY_DATE
			, URA.UNFIT_RESULT_NO UNFIT_RESULT_IDX
		FROM TB_ITEM_INSPECT_ADM IIA_TB
		
		LEFT JOIN TB_IN_OUT_WHS_ADM IOWA_TB
		ON IOWA_TB.IN_SLIP_NO = IIA_TB.IN_SLIP_NO
		AND IOWA_TB.IN_SLIP_SEQ = IIA_TB.IN_SLIP_SEQ
		
		LEFT JOIN TB_ITEM_INSPECT_MASTER_ADM IIMA_TB
		ON IOWA_TB.IN_SLIP_NO = IIMA_TB.IN_SLIP_NO
		
		LEFT JOIN TB_ITEM_INSPECT_FAULTY_TYPE IFA_TB
		ON IIA_TB.IN_SLIP_NO = IFA_TB.IN_SLIP_NO
		AND IIA_TB.IN_SLIP_SEQ = IFA_TB.IN_SLIP_SEQ
		
		LEFT JOIN TB_UNFIT_ADM UA_TB
		ON IOWA_TB.BARCODE_NO = UA_TB.UNFIT_LOT		
		AND IFA_TB.FAULTY_TYPE_CD  = UA_TB.FAULTY_CD
		AND UA_TB.UNFIT_GUBUN = '001'
		
		LEFT JOIN TB_ITEM_INFO_ADM IINA_TB
		ON IIA_TB.ITEM_SEQ = IINA_TB.ITEM_SEQ
		
		LEFT OUTER JOIN(
			SELECT 
				Z.IN_SLIP_NO
				, SUM(PRE_IN_WHS_QTY) PRE_IN_WHS_QTY
				, SUM(IN_WHS_QTY) IN_WHS_QTY
				, SUM(FAULTY_QTY) FAULTY_QTY
				, MAX(PRE_IN_WHS_DATE) PRE_IN_WHS_DATE
				, MAX(IN_WHS_DATE) IN_WHS_DATE
				, CASE WHEN COUNT(*) = (
					SELECT COUNT(*)
					FROM TB_IN_OUT_WHS_ADM 
					GROUP BY IN_SLIP_NO,APPROVAL_CD
					HAVING APPROVAL_CD = '001'
					AND IN_SLIP_NO = Z.IN_SLIP_NO
				) THEN '검사완료' ELSE '진행중' END STATUS_CD
			FROM TB_IN_OUT_WHS_ADM Z
			GROUP BY Z.IN_SLIP_NO
		)D
		ON D.IN_SLIP_NO = IOWA_TB.IN_SLIP_NO
		
		LEFT OUTER JOIN TB_UNFIT_RESULT_ADM URA
		ON IFA_TB.FAULTY_TYPE_CD = URA.UNFIT_NO
		AND IOWA_TB.BARCODE_NO = URA.UNFIT_LOT
		
		LEFT OUTER JOIN (
			SELECT
				IIMA_TB.INSPECT_DATE, IFA_TB.FAULTY_TYPE_CD FAULTY_CD, IOWA_TB.BARCODE_NO LOT_NO, SUM(ISNULL(IFA_TB.FAULTY_TYPE_QTY, 0)) FAULTY_QTY_SUM
			FROM TB_ITEM_INSPECT_ADM IIA_TB
			
			LEFT JOIN TB_IN_OUT_WHS_ADM IOWA_TB
			ON IOWA_TB.IN_SLIP_NO = IIA_TB.IN_SLIP_NO
			AND IOWA_TB.IN_SLIP_SEQ = IIA_TB.IN_SLIP_SEQ
			
			LEFT JOIN TB_ITEM_INSPECT_MASTER_ADM IIMA_TB
			ON IOWA_TB.IN_SLIP_NO = IIMA_TB.IN_SLIP_NO
			
			LEFT JOIN TB_ITEM_INSPECT_FAULTY_TYPE IFA_TB
			ON IIA_TB.IN_SLIP_NO = IFA_TB.IN_SLIP_NO
			AND IIA_TB.IN_SLIP_SEQ = IFA_TB.IN_SLIP_SEQ
			
			GROUP BY IIMA_TB.INSPECT_DATE, IFA_TB.FAULTY_TYPE_CD, IOWA_TB.BARCODE_NO
		) IIA_SUB
		ON IIA_SUB.INSPECT_DATE = IIMA_TB.INSPECT_DATE
		AND IIA_SUB.FAULTY_CD = IFA_TB.FAULTY_TYPE_CD
		AND IIA_SUB.LOT_NO = IOWA_TB.BARCODE_NO
		
		LEFT OUTER JOIN (
			SELECT IOWA_TB.BARCODE_NO, SUM(ISNULL(IIFT_TB.FAULTY_TYPE_QTY, 0)) FAULTY_QTY_WHOLE
			FROM TB_IN_OUT_WHS_ADM IOWA_TB
			
			INNER JOIN TB_ITEM_INSPECT_FAULTY_TYPE IIFT_TB
			ON IOWA_TB.IN_SLIP_NO = IIFT_TB.IN_SLIP_NO
			AND IOWA_TB.IN_SLIP_SEQ = IIFT_TB.IN_SLIP_SEQ
			
			GROUP BY IOWA_TB.BARCODE_NO
		) IIFT_ALL
		ON IOWA_TB.BARCODE_NO = IIFT_ALL.BARCODE_NO
		
		WHERE 1=1
		AND IIA_TB.QA_EVAL = '002'
		AND FAULTY_TYPE_QTY > 0
		<if test="startDate != null and !startDate.equals('')">
		AND IIMA_TB.INSPECT_DATE BETWEEN #{startDate} AND #{endDate}
		</if>
		<if test="mainGubun != null and !mainGubun.equals('')">
		AND IINA_TB.MAIN_GUBUN = #{mainGubun}
		</if>
		
		<if test="itemSeq != null and !itemSeq.equals('')">
		AND IINA_TB.ITEM_SEQ = #{itemSeq}
		</if>
		<if test="itemCus != null and !itemCus.equals('')">
		AND IINA_TB.ITEM_CUS = #{itemCus}
		</if>
		<if test="unfitResultNo != null and !unfitResultNo.equals('')">
		AND IIF(URA.UNFIT_RESULT_NO IS NOT NULL, '등록', '미등록') = #{unfitResultNo}
		</if>
		<if test="unfitProc != null and !unfitProc.equals('')">
		AND URA.UNFIT_PROC = #{unfitProc}
		</if>
		
		ORDER BY IIMA_TB.INSPECT_DATE, IOWA_TB.BARCODE_NO
	</select>
	
	<!-- 부적합관리대장(공정) - 사출 목록조회 -->
	<select id="unfitPrcssAdmInjectList" resultMap="UnfitAdmVo">
		SELECT
			WOFT.FAULTY_TYPE_DATE INSPECT_DATE
			, IIA_TB.ITEM_CUS
			, (SELECT DEAL_CORP_NM FROM TB_DEAL_CORP_ADM X WHERE X.DEAL_CORP_CD = IIA_TB.ITEM_CUS) ITEM_CUS_NM 
			, (SELECT BASE_NM FROM TB_COMMON_CODE_ADM H WHERE H.BASE_CD = IIA_TB.ITEM_MODEL AND H.BASE_GROUP_CD = '099' ) ITEM_MODEL_NM
			, (SELECT BASE_NM FROM TB_COMMON_CODE_ADM X WHERE X.BASE_CD = IIA_TB.ITEM_UNIT AND X.BASE_GROUP_CD = '036') ITEM_UNIT_NM
			, WOP_TB.MINOR_PRCSS_CD
			, IIA_TB.ITEM_CD
			, IIA_TB.ITEM_NM
			, IIA_TB.ITEM_SEQ
			, WOP_TB.ORD_LOT_NO LOT_NO
			, WOFT.FAULTY_TYPE_CD FAULTY_CD
			, (SELECT BS.BASE_INFO_NM FROM TB_BASE_INFO_ADM BS WHERE BS.BASE_INFO_TYPE = 'FT' AND BS.BASE_INFO_CD = WOFT.FAULTY_TYPE_CD) FAULTY_DTL
			, WOP_TB.OUTPUT_QTY
			, WOP_SUB.FAIR_QTY
			, UA_TB.UNFIT_NO
			, URA.UNFIT_PROC
			, UA_TB.CM_APPRO_DATE
			, UA_TB.CM_COMPL_DATE 
			, UA_TB.UNFIT_DESC
			, IIF(URA.UNFIT_RESULT_NO IS NOT NULL, '등록', '미등록') UNFIT_RESULT_NO
			, FQS_TB.FAULTY_QTY_SUM
			, WOFT_ALL.FAULTY_QTY_WHOLE
			, URA.UNFIT_PAIR_CNT
			, URA.UNFIT_FAULTY_CNT
			, URA.UNFIT_OTHER_CNT
			, (SELECT BASE_NM FROM TB_COMMON_CODE_ADM X WHERE X.BASE_CD = URA.UNFIT_PROC AND X.BASE_GROUP_CD = '156') UNFIT_PROC_NM
			, URA.UNFIT_FAULTY_DATE
			, URA.UNFIT_RESULT_NO UNFIT_RESULT_IDX
		FROM (
			SELECT WORK_ORD_NO, WORK_ORD_SEQ, FAULTY_TYPE_CD, ISNULL(SUM(FAULTY_TYPE_QTY), 0) FAULTY_TYPE_QTY, FAULTY_TYPE_DATE 
			FROM TB_WORK_ORDER_FAULTY_TYPE
			GROUP BY WORK_ORD_NO, WORK_ORD_SEQ, FAULTY_TYPE_CD, FAULTY_TYPE_DATE
		) WOFT
		
		LEFT OUTER JOIN TB_WORK_ORDER_PRCSS WOP_TB
		ON WOP_TB.WORK_ORD_NO = WOFT.WORK_ORD_NO
		AND WOP_TB.WORK_ORD_SEQ = WOFT.WORK_ORD_SEQ
		
		LEFT OUTER JOIN (
			SELECT WORK_ORD_NO, MIDDLE_PRCSS_CD, ISNULL(SUM(FAIR_QTY), 0) FAIR_QTY
			FROM TB_WORK_ORDER_PRCSS
			GROUP BY WORK_ORD_NO, MIDDLE_PRCSS_CD
		) WOP_SUB
		ON WOP_SUB.WORK_ORD_NO = WOP_TB.WORK_ORD_NO
		AND WOP_SUB.MIDDLE_PRCSS_CD = WOP_TB.MIDDLE_PRCSS_CD
		
		LEFT OUTER JOIN TB_UNFIT_ADM UA_TB
		ON WOP_TB.ORD_LOT_NO = UA_TB.UNFIT_LOT 
		AND WOFT.FAULTY_TYPE_CD = UA_TB.FAULTY_CD
		AND UA_TB.UNFIT_GUBUN = '002'
		
		LEFT OUTER JOIN TB_ITEM_INFO_ADM IIA_TB
		ON WOP_TB.ITEM_SEQ = IIA_TB.ITEM_SEQ
		
		LEFT OUTER JOIN TB_UNFIT_RESULT_ADM URA
		ON WOFT.FAULTY_TYPE_CD = URA.UNFIT_NO
		AND WOP_TB.ORD_LOT_NO = URA.UNFIT_LOT
		
		LEFT OUTER JOIN (
			SELECT T.INSPECT_DATE, T.LOT_NO, T.FAULTY_CD, SUM(T.FAULTY_QTY) FAULTY_QTY_SUM
			FROM (
				SELECT WOFT.FAULTY_TYPE_DATE INSPECT_DATE, WOP_TB.ORD_LOT_NO LOT_NO, WOFT.FAULTY_TYPE_CD FAULTY_CD, WOFT.FAULTY_TYPE_QTY FAULTY_QTY
				FROM (
					SELECT WORK_ORD_NO, MIDDLE_PRCSS_CD, WORK_ORD_SEQ, FAULTY_TYPE_CD, ISNULL(SUM(FAULTY_TYPE_QTY), 0) FAULTY_TYPE_QTY, FAULTY_TYPE_DATE
					FROM TB_WORK_ORDER_FAULTY_TYPE
					GROUP BY WORK_ORD_NO, MIDDLE_PRCSS_CD, WORK_ORD_SEQ, FAULTY_TYPE_CD, FAULTY_TYPE_DATE
				) WOFT
				LEFT OUTER JOIN TB_WORK_ORDER_PRCSS WOP_TB
				ON WOP_TB.WORK_ORD_NO = WOFT.WORK_ORD_NO
				AND WOP_TB.WORK_ORD_SEQ = WOFT.WORK_ORD_SEQ
				WHERE 1=1
				GROUP BY WOFT.FAULTY_TYPE_DATE, WOFT.FAULTY_TYPE_CD, WOP_TB.ORD_LOT_NO, WOFT.FAULTY_TYPE_QTY
				HAVING 1=1
				AND FAULTY_TYPE_QTY > 0
			) T
			WHERE 1=1
			<if test="startDate != null and !startDate.equals('')">
			AND T.INSPECT_DATE BETWEEN #{startDate} AND #{endDate}
			</if>
			GROUP BY T.INSPECT_DATE, T.LOT_NO, T.FAULTY_CD
		) FQS_TB
		ON FQS_TB.INSPECT_DATE = WOFT.FAULTY_TYPE_DATE
		AND FQS_TB.LOT_NO = WOP_TB.ORD_LOT_NO
		AND FQS_TB.FAULTY_CD = WOFT.FAULTY_TYPE_CD
		
		LEFT OUTER JOIN (
			SELECT WOP_TB.ORD_LOT_NO, SUM(WOFT.FAULTY_TYPE_QTY) FAULTY_QTY_WHOLE
			FROM TB_WORK_ORDER_FAULTY_TYPE WOFT
			
			INNER JOIN TB_WORK_ORDER_PRCSS WOP_TB
			ON WOP_TB.WORK_ORD_NO = WOFT.WORK_ORD_NO
			AND WOP_TB.WORK_ORD_SEQ = WOFT.WORK_ORD_SEQ
			
			GROUP BY WOP_TB.ORD_LOT_NO
		) WOFT_ALL
		ON WOP_TB.ORD_LOT_NO = WOFT_ALL.ORD_LOT_NO
		
		WHERE 1=1
		<if test="startDate != null and !startDate.equals('')">
		AND WOFT.FAULTY_TYPE_DATE BETWEEN #{startDate} AND #{endDate}
		AND WOFT.FAULTY_TYPE_QTY > 0
		</if>
		<if test="mainGubun != null and !mainGubun.equals('')">
		AND IIA_TB.MAIN_GUBUN = #{mainGubun}
		</if>
		<if test="itemSeq != null and !itemSeq.equals('')">
		AND IIA_TB.ITEM_SEQ = #{itemSeq}
		</if>
		<if test="itemCus != null and !itemCus.equals('')">
		AND IIA_TB.ITEM_CUS = #{itemCus}
		</if>
		<if test="unfitResultNo != null and !unfitResultNo.equals('')">
		AND IIF(URA.UNFIT_RESULT_NO IS NOT NULL, '등록', '미등록') = #{unfitResultNo}
		</if>
		<if test="unfitProc != null and !unfitProc.equals('')">
		AND URA.UNFIT_PROC = #{unfitProc}
		</if>
		
		GROUP BY
			WOFT.FAULTY_TYPE_DATE
			, IIA_TB.ITEM_CUS
			, WOP_TB.MINOR_PRCSS_CD
			, IIA_TB.ITEM_MODEL
			, IIA_TB.ITEM_UNIT
			, IIA_TB.ITEM_CD
			, IIA_TB.ITEM_NM
			, IIA_TB.ITEM_SEQ
			, WOFT.FAULTY_TYPE_CD
			, WOP_TB.OUTPUT_QTY
			, WOP_TB.ORD_LOT_NO
			, WOP_SUB.FAIR_QTY
			, UA_TB.UNFIT_NO
			, UA_TB.CM_APPRO_DATE
			, UA_TB.CM_COMPL_DATE
			, UA_TB.UNFIT_DESC
			, URA.UNFIT_RESULT_NO
			, FQS_TB.FAULTY_QTY_SUM
			, WOFT_ALL.FAULTY_QTY_WHOLE
			, URA.UNFIT_PAIR_CNT
			, URA.UNFIT_FAULTY_CNT
			, URA.UNFIT_OTHER_CNT
			, URA.UNFIT_PROC
			, URA.UNFIT_FAULTY_DATE
		HAVING 1=1
		AND FQS_TB.FAULTY_QTY_SUM > 0
		ORDER BY WOFT.FAULTY_TYPE_DATE
	</select>
	
	<!-- 부적합관리대장(공정) - 봉제 목록조회 -->
	<select id="unfitPrcssAdmList" resultMap="UnfitAdmVo">
		SELECT
			WOP_TB.ORD_DATE INSPECT_DATE
			, IIA_TB.ITEM_CUS
			, (SELECT DEAL_CORP_NM FROM TB_DEAL_CORP_ADM X WHERE X.DEAL_CORP_CD = IIA_TB.ITEM_CUS) ITEM_CUS_NM
			, (SELECT BASE_NM FROM TB_COMMON_CODE_ADM H WHERE H.BASE_CD = IIA_TB.ITEM_MODEL AND H.BASE_GROUP_CD = '099' ) ITEM_MODEL_NM
			, (SELECT BASE_NM FROM TB_COMMON_CODE_ADM X WHERE X.BASE_CD = IIA_TB.ITEM_UNIT AND X.BASE_GROUP_CD = '036') ITEM_UNIT_NM
			, WOP_TB.MINOR_PRCSS_CD
			, IIA_TB.ITEM_CD
			, IIA_TB.ITEM_NM
			, IIA_TB.ITEM_SEQ
			, WOP_TB.ORD_LOT_NO LOT_NO
			, WOFT.FAULTY_TYPE_CD FAULTY_CD
			, (SELECT BS.BASE_INFO_NM FROM TB_BASE_INFO_ADM BS WHERE BS.BASE_INFO_TYPE = 'FT' AND BS.BASE_INFO_CD = WOFT.FAULTY_TYPE_CD) FAULTY_DTL
			, WOP_TB.OUTPUT_QTY
			, WOP_SUB.FAIR_QTY
			, UA_TB.UNFIT_NO
			, URA.UNFIT_PROC
			, UA_TB.CM_APPRO_DATE
			, UA_TB.CM_COMPL_DATE 
			, UA_TB.UNFIT_DESC
			, IIF(URA.UNFIT_RESULT_NO IS NOT NULL, '등록', '미등록') UNFIT_RESULT_NO
			, FQS_TB.FAULTY_QTY_SUM
			, WOFT_ALL.FAULTY_QTY_WHOLE
			, URA.UNFIT_PAIR_CNT
			, URA.UNFIT_FAULTY_CNT
			, URA.UNFIT_OTHER_CNT
			, (SELECT BASE_NM FROM TB_COMMON_CODE_ADM X WHERE X.BASE_CD = URA.UNFIT_PROC AND X.BASE_GROUP_CD = '156') UNFIT_PROC_NM
			, URA.UNFIT_FAULTY_DATE
			, URA.UNFIT_RESULT_NO UNFIT_RESULT_IDX
		FROM (
			SELECT WORK_ORD_NO, MIDDLE_PRCSS_CD, FAULTY_TYPE_CD, ISNULL(SUM(FAULTY_TYPE_QTY), 0) FAULTY_TYPE_QTY, FAULTY_TYPE_DATE 
			FROM TB_WORK_ORDER_FAULTY_TYPE
			GROUP BY WORK_ORD_NO, MIDDLE_PRCSS_CD, FAULTY_TYPE_CD, FAULTY_TYPE_DATE
		) WOFT
		
		LEFT OUTER JOIN TB_WORK_ORDER_PRCSS WOP_TB
		ON WOP_TB.WORK_ORD_NO = WOFT.WORK_ORD_NO
		AND WOP_TB.MIDDLE_PRCSS_CD = WOFT.MIDDLE_PRCSS_CD
		AND WOP_TB.WORK_STATUS = '003'
		
		LEFT OUTER JOIN (
			SELECT WORK_ORD_NO, MIDDLE_PRCSS_CD, ISNULL(SUM(FAIR_QTY), 0) FAIR_QTY
			FROM TB_WORK_ORDER_PRCSS
			GROUP BY WORK_ORD_NO, MIDDLE_PRCSS_CD
		) WOP_SUB
		ON WOP_SUB.WORK_ORD_NO = WOP_TB.WORK_ORD_NO
		AND WOP_SUB.MIDDLE_PRCSS_CD = WOP_TB.MIDDLE_PRCSS_CD
		
		LEFT OUTER JOIN TB_UNFIT_ADM UA_TB
		ON WOP_TB.ORD_LOT_NO = UA_TB.UNFIT_LOT 
		AND WOFT.FAULTY_TYPE_CD = UA_TB.FAULTY_CD
		AND UA_TB.UNFIT_GUBUN = '002'
		
		LEFT OUTER JOIN TB_ITEM_INFO_ADM IIA_TB
		ON WOP_TB.ITEM_SEQ = IIA_TB.ITEM_SEQ
		
		LEFT OUTER JOIN TB_UNFIT_RESULT_ADM URA
		ON WOFT.FAULTY_TYPE_CD = URA.UNFIT_NO
		AND WOP_TB.ORD_LOT_NO = URA.UNFIT_LOT
		
		LEFT OUTER JOIN (
			SELECT T.INSPECT_DATE, T.LOT_NO, T.FAULTY_CD, SUM(T.FAULTY_QTY) FAULTY_QTY_SUM
			FROM (
				SELECT WOP_TB.ORD_DATE INSPECT_DATE, WOP_TB.ORD_LOT_NO LOT_NO, WOFT.FAULTY_TYPE_CD FAULTY_CD, WOFT.FAULTY_TYPE_QTY FAULTY_QTY
				FROM (
					SELECT WORK_ORD_NO, MIDDLE_PRCSS_CD, WORK_ORD_SEQ, FAULTY_TYPE_CD, ISNULL(SUM(FAULTY_TYPE_QTY), 0) FAULTY_TYPE_QTY, FAULTY_TYPE_DATE
					FROM TB_WORK_ORDER_FAULTY_TYPE
					GROUP BY WORK_ORD_NO, MIDDLE_PRCSS_CD, WORK_ORD_SEQ, FAULTY_TYPE_CD, FAULTY_TYPE_DATE
				) WOFT
				LEFT OUTER JOIN TB_WORK_ORDER_PRCSS WOP_TB
				ON WOP_TB.WORK_ORD_NO = WOFT.WORK_ORD_NO
				AND WOP_TB.MIDDLE_PRCSS_CD = WOFT.MIDDLE_PRCSS_CD
				AND WOP_TB.WORK_ORD_SEQ = WOFT.WORK_ORD_SEQ
				AND WOP_TB.WORK_STATUS = '003'
				WHERE 1=1
				GROUP BY WOP_TB.ORD_DATE, WOFT.FAULTY_TYPE_CD, WOP_TB.ORD_LOT_NO, WOFT.FAULTY_TYPE_QTY
				HAVING 1=1
				AND FAULTY_TYPE_QTY > 0
			) T
			WHERE 1=1
			<if test="startDate != null and !startDate.equals('')">
			AND T.INSPECT_DATE BETWEEN #{startDate} AND #{endDate}
			</if>
			GROUP BY T.INSPECT_DATE, T.LOT_NO, T.FAULTY_CD
		) FQS_TB
		ON FQS_TB.INSPECT_DATE = WOP_TB.ORD_DATE
		AND FQS_TB.LOT_NO = WOP_TB.ORD_LOT_NO
		AND FQS_TB.FAULTY_CD = WOFT.FAULTY_TYPE_CD
		
		LEFT OUTER JOIN (
			SELECT WOP_TB.ORD_LOT_NO, SUM(WOFT.FAULTY_TYPE_QTY) FAULTY_QTY_WHOLE
			FROM TB_WORK_ORDER_FAULTY_TYPE WOFT
			
			INNER JOIN TB_WORK_ORDER_PRCSS WOP_TB
			ON WOP_TB.WORK_ORD_NO = WOFT.WORK_ORD_NO
			AND WOP_TB.MIDDLE_PRCSS_CD = WOFT.MIDDLE_PRCSS_CD
			AND WOP_TB.WORK_ORD_SEQ = WOFT.WORK_ORD_SEQ
			AND WOP_TB.WORK_STATUS = '003'
			
			GROUP BY WOP_TB.ORD_LOT_NO
		) WOFT_ALL
		ON WOP_TB.ORD_LOT_NO = WOFT_ALL.ORD_LOT_NO
		
		WHERE 1=1
		<if test="startDate != null and !startDate.equals('')">
		AND WOP_TB.ORD_DATE BETWEEN #{startDate} AND #{endDate}
		AND WOFT.FAULTY_TYPE_QTY > 0
		</if>
		<if test="mainGubun != null and !mainGubun.equals('')">
		AND IIA_TB.MAIN_GUBUN = #{mainGubun}
		</if>
		<if test="itemSeq != null and !itemSeq.equals('')">
		AND IIA_TB.ITEM_SEQ = #{itemSeq}
		</if>
		<if test="itemCus != null and !itemCus.equals('')">
		AND IIA_TB.ITEM_CUS = #{itemCus}
		</if>
		<if test="unfitResultNo != null and !unfitResultNo.equals('')">
		AND IIF(URA.UNFIT_RESULT_NO IS NOT NULL, '등록', '미등록') = #{unfitResultNo}
		</if>
		<if test="unfitProc != null and !unfitProc.equals('')">
		AND URA.UNFIT_PROC = #{unfitProc}
		</if>
		
		GROUP BY
			WOP_TB.ORD_DATE
			, IIA_TB.ITEM_CUS
			, WOP_TB.MINOR_PRCSS_CD
			, IIA_TB.ITEM_MODEL
			, IIA_TB.ITEM_UNIT
			, IIA_TB.ITEM_CD
			, IIA_TB.ITEM_NM
			, IIA_TB.ITEM_SEQ
			, WOFT.FAULTY_TYPE_CD
			, WOP_TB.OUTPUT_QTY
			, WOP_TB.ORD_LOT_NO
			, WOP_SUB.FAIR_QTY
			, UA_TB.UNFIT_NO
			, UA_TB.CM_APPRO_DATE
			, UA_TB.CM_COMPL_DATE
			, UA_TB.UNFIT_DESC
			, URA.UNFIT_RESULT_NO
			, FQS_TB.FAULTY_QTY_SUM
			, WOFT_ALL.FAULTY_QTY_WHOLE
			, URA.UNFIT_PAIR_CNT
			, URA.UNFIT_FAULTY_CNT
			, URA.UNFIT_OTHER_CNT
			, URA.UNFIT_PROC
			, URA.UNFIT_FAULTY_DATE
		HAVING 1=1
		AND FQS_TB.FAULTY_QTY_SUM > 0
		ORDER BY WOP_TB.ORD_DATE
	</select>
	
	<!-- 부적합관리대장(출하) 목록조회 -->
	<select id="unfitCompleteAdmList" resultMap="UnfitAdmVo">
		SELECT
			DOD_TB.DO_NO
			, DOD_TB.DO_NO_SEV
			, DOD_TB.INSPECT_DATE
			, IIA_TB.ITEM_SEQ
			, IIA_TB.ITEM_CUS
			, (SELECT DEAL_CORP_NM FROM TB_DEAL_CORP_ADM X WHERE X.DEAL_CORP_CD = IIA_TB.ITEM_CUS) ITEM_CUS_NM
			, (SELECT X.BASE_NM FROM TB_COMMON_CODE_ADM X WHERE X.BASE_CD = IIA_TB.ITEM_MODEL AND X.BASE_GROUP_CD = '099') ITEM_MODEL_NM
			, (SELECT X.BASE_NM FROM TB_COMMON_CODE_ADM X WHERE X.BASE_CD = IIA_TB.ITEM_UNIT AND X.BASE_GROUP_CD = '036') ITEM_UNIT_NM
			, IIA_TB.ITEM_CD
			, IIA_TB.ITEM_NM
			, ICFT.FAULTY_TYPE_CD FAULTY_CD
			, (SELECT BASE_INFO_NM FROM TB_BASE_INFO_ADM X WHERE X.BASE_INFO_TYPE='FT' AND X.BASE_INFO_CD=ICFT.FAULTY_TYPE_CD) FAULTY_DTL
			, UA_TB.UNFIT_NO
			, DOD_TB.LOT_NO
			, DOD_TB.TARGET_QTY FAIR_QTY
			, DOD_SUB.FAULTY_QTY_SUM
			, ICFT.FAULTY_TYPE_QTY FAULTY_QTY
			, UA_TB.CM_APPRO_DATE
			, UA_TB.CM_COMPL_DATE
			, UA_TB.UNFIT_DESC
			, IIF(URA.UNFIT_RESULT_NO IS NOT NULL, '등록', '미등록') UNFIT_RESULT_NO
			, ICFT_ALL.FAULTY_QTY_WHOLE
			, URA.UNFIT_PAIR_CNT
			, URA.UNFIT_FAULTY_CNT
			, URA.UNFIT_OTHER_CNT
			, (SELECT BASE_NM FROM TB_COMMON_CODE_ADM X WHERE X.BASE_CD = URA.UNFIT_PROC AND X.BASE_GROUP_CD = '156') UNFIT_PROC_NM
			, URA.UNFIT_FAULTY_DATE
			, URA.UNFIT_RESULT_NO UNFIT_RESULT_IDX
		FROM TB_DELIVERY_ORDER_DTL DOD_TB
		
		LEFT OUTER JOIN TB_ITEM_COMPLETE_MASTER_ADM ICM_TB
		ON DOD_TB.DO_NO = ICM_TB.DO_NO
		AND DOD_TB.DO_NO_SEV = ICM_TB.DO_NO_SUB
		
		LEFT OUTER JOIN TB_ITEM_COMPLETE_ADM ICA_TB
		ON ICM_TB.DO_NO=ICA_TB.DO_NO
		AND ICM_TB.DO_NO_SUB=ICA_TB.DO_NO_SUB
		
		LEFT OUTER JOIN TB_ITEM_COMPLETE_FAULTY_TYPE ICFT
		ON ICA_TB.DO_NO = ICFT.DO_NO
		AND ICA_TB.DO_NO_SUB = ICFT.DO_NO_SUB
		AND ICA_TB.ICA_SEQ = ICFT.ICA_SEQ 
		
		LEFT OUTER JOIN TB_UNFIT_ADM UA_TB
		ON DOD_TB.DO_NO = UA_TB.UNFIT_NO
		
		LEFT OUTER JOIN TB_ITEM_INFO_ADM IIA_TB
		ON DOD_TB.ITEM_SEQ = IIA_TB.ITEM_SEQ
		
		LEFT OUTER JOIN TB_UNFIT_RESULT_ADM URA
		ON ICFT.FAULTY_TYPE_CD = URA.UNFIT_NO
		AND DOD_TB.LOT_NO = URA.UNFIT_LOT
		
		LEFT OUTER JOIN (
			SELECT DOD_TB.INSPECT_DATE, DOD_TB.LOT_NO, ICFT.FAULTY_TYPE_CD FAULTY_CD, SUM(ICFT.FAULTY_TYPE_QTY) FAULTY_QTY_SUM
			FROM TB_DELIVERY_ORDER_DTL DOD_TB
			
			LEFT OUTER JOIN TB_ITEM_COMPLETE_MASTER_ADM ICM_TB
			ON DOD_TB.DO_NO = ICM_TB.DO_NO
			AND DOD_TB.DO_NO_SEV = ICM_TB.DO_NO_SUB
			
			LEFT OUTER JOIN TB_ITEM_COMPLETE_ADM ICA_TB
			ON ICM_TB.DO_NO=ICA_TB.DO_NO
			AND ICM_TB.DO_NO_SUB=ICA_TB.DO_NO_SUB
			
			LEFT OUTER JOIN TB_ITEM_COMPLETE_FAULTY_TYPE ICFT
			ON ICA_TB.DO_NO = ICFT.DO_NO
			AND ICA_TB.DO_NO_SUB = ICFT.DO_NO_SUB
			AND ICA_TB.ICA_SEQ = ICFT.ICA_SEQ
			
			GROUP BY DOD_TB.INSPECT_DATE, DOD_TB.LOT_NO, ICFT.FAULTY_TYPE_CD
		) DOD_SUB
		ON DOD_SUB.INSPECT_DATE = DOD_TB.INSPECT_DATE
		AND DOD_SUB.FAULTY_CD = ICFT.FAULTY_TYPE_CD
		AND DOD_SUB.LOT_NO = DOD_TB.LOT_NO
		
		LEFT OUTER JOIN (
			SELECT DOD_TB.LOT_NO, SUM(ICFT.FAULTY_TYPE_QTY) FAULTY_QTY_WHOLE
			FROM TB_DELIVERY_ORDER_DTL DOD_TB
						
			INNER JOIN TB_ITEM_COMPLETE_ADM ICA_TB
			ON DOD_TB.DO_NO=ICA_TB.DO_NO
			AND DOD_TB.DO_NO_SEV=ICA_TB.DO_NO_SUB
						
			INNER JOIN TB_ITEM_COMPLETE_FAULTY_TYPE ICFT
			ON ICA_TB.DO_NO = ICFT.DO_NO
			AND ICA_TB.DO_NO_SUB = ICFT.DO_NO_SUB
			AND ICA_TB.ICA_SEQ = ICFT.ICA_SEQ
			
			GROUP BY DOD_TB.LOT_NO
		) ICFT_ALL
		ON DOD_TB.LOT_NO = ICFT_ALL.LOT_NO
		
		WHERE 1=1
		<if test="startDate != null and !startDate.equals('')">
		AND DOD_TB.INSPECT_DATE  BETWEEN #{startDate} AND #{endDate}
		</if>
		<if test="mainGubun != null and !mainGubun.equals('')">
		AND IIA_TB.MAIN_GUBUN = #{mainGubun}
		</if>
		<if test="itemSeq != null and !itemSeq.equals('')">
		AND IIA_TB.ITEM_SEQ = #{itemSeq}
		</if>
		<if test="itemCus != null and !itemCus.equals('')">
		AND IIA_TB.ITEM_CUS = #{itemCus}
		</if>
		<if test="unfitResultNo != null and !unfitResultNo.equals('')">
		AND IIF(URA.UNFIT_RESULT_NO IS NOT NULL, '등록', '미등록') = #{unfitResultNo}
		</if>
		<if test="unfitProc != null and !unfitProc.equals('')">
		AND URA.UNFIT_PROC = #{unfitProc}
		</if>
		
		GROUP BY
			DOD_TB.DO_NO
			, DOD_TB.DO_NO_SEV
			, DOD_TB.INSPECT_DATE
			, IIA_TB.ITEM_SEQ
			, IIA_TB.ITEM_CUS	
			, IIA_TB.ITEM_MODEL
			, IIA_TB.ITEM_UNIT
			, IIA_TB.ITEM_CD
			, IIA_TB.ITEM_NM
			, ICFT.FAULTY_TYPE_CD
			, UA_TB.UNFIT_NO
			, DOD_TB.LOT_NO
			, DOD_TB.TARGET_QTY
			, ICA_TB.PAIR_QTY
			, ICA_TB.FAULTY_QTY
			, ICFT.FAULTY_TYPE_QTY
			, UA_TB.CM_APPRO_DATE
			, UA_TB.CM_COMPL_DATE
			, UA_TB.UNFIT_DESC
			, URA.UNFIT_RESULT_NO
			, DOD_SUB.FAULTY_QTY_SUM
			, ICFT_ALL.FAULTY_QTY_WHOLE
			, URA.UNFIT_PAIR_CNT
			, URA.UNFIT_FAULTY_CNT
			, URA.UNFIT_OTHER_CNT
			, URA.UNFIT_PROC
			, URA.UNFIT_FAULTY_DATE
		HAVING 1=1
		AND FAULTY_TYPE_QTY > 0
	</select>
	
	<!-- 부적합관리대장(단가) 목록조회 -->
	<select id="unfitPriceAdmList" resultMap="UnfitAdmVo">
		SELECT
			WSIF.FAULTY_DATE INSPECT_DATE
			, WSIF.FAULTY_TYPE FAULTY_CD
			, IIA.ITEM_CUS
			, (SELECT DEAL_CORP_NM FROM TB_DEAL_CORP_ADM X WHERE X.DEAL_CORP_CD = IIA.ITEM_CUS) ITEM_CUS_NM 
			, PCA.PRCSS_NM MINOR_PRCSS_CD
			, IIA.ITEM_MODEL
			, (SELECT BASE_NM FROM TB_COMMON_CODE_ADM H WHERE H.BASE_CD = IIA.ITEM_MODEL AND H.BASE_GROUP_CD = '099' ) ITEM_MODEL_NM
			, (SELECT BASE_NM FROM TB_COMMON_CODE_ADM X WHERE X.BASE_CD = IIA.ITEM_UNIT AND X.BASE_GROUP_CD = '036') ITEM_UNIT_NM
			, IIA.ITEM_SEQ
			, IIA.ITEM_CD
			, IIA.ITEM_NM
			, (SELECT BS.BASE_INFO_NM FROM TB_BASE_INFO_ADM BS WHERE BS.BASE_INFO_TYPE = 'FT' AND BS.BASE_INFO_CD = WSIF.FAULTY_TYPE) FAULTY_DTL
			, WSIF.BARCODE_NO LOT_NO
			, UA_TB.CM_APPRO_DATE
			, UA_TB.CM_COMPL_DATE
			, UA_TB.UNFIT_DESC
			, WSIF_SUB.FAULTY_QTY_SUM
			, WOM.TOTAL_CONSUMPT FAIR_QTY
			, IIF(URA.UNFIT_RESULT_NO IS NOT NULL, '등록', '미등록') UNFIT_RESULT_NO
			, WSIF_ALL.FAULTY_QTY_WHOLE
			, URA.UNFIT_PAIR_CNT
			, URA.UNFIT_FAULTY_CNT
			, URA.UNFIT_OTHER_CNT
			, (SELECT BASE_NM FROM TB_COMMON_CODE_ADM X WHERE X.BASE_CD = URA.UNFIT_PROC AND X.BASE_GROUP_CD = '156') UNFIT_PROC_NM
			, URA.UNFIT_FAULTY_DATE
			, URA.UNFIT_RESULT_NO UNFIT_RESULT_IDX
		FROM (
			SELECT FAULTY_DATE, FAULTY_TYPE, WORK_ORD_NO,BARCODE_NO, WORK_PROG_NO, ITEM_SEQ, SUM(FAULTY_QTY) FAULTY_QTY
			FROM TB_WORK_SINGLE_ITEM_FAULTY
			GROUP BY FAULTY_DATE, FAULTY_TYPE, WORK_ORD_NO, BARCODE_NO, WORK_PROG_NO, ITEM_SEQ
		) WSIF
		
		LEFT OUTER JOIN TB_WORK_ORDER_PROGRESS WOP
		ON WSIF.WORK_PROG_NO = WOP.WORK_PROG_NO
		
		LEFT OUTER JOIN TB_PRCSS_CODE_ADM PCA
		ON WOP.MINOR_PRCSS_CD = PCA.PRCSS_CD
		AND PCA.PRCSS_TYPE = '001'
		AND PRCSS_CD = LOWER_PRCSS_CD
		
		LEFT OUTER JOIN (
			SELECT A.FAULTY_DATE, A.FAULTY_TYPE,B.BARCODE_NO, MAX(TOTAL_CONSUMPT) TOTAL_CONSUMPT
			FROM TB_WORK_SINGLE_ITEM_FAULTY A
			LEFT OUTER JOIN TB_WORK_ORDER_MATRL B
			ON B.BARCODE_NO = A.BARCODE_NO
			AND B.WORK_ORD_NO = A.WORK_ORD_NO
			GROUP BY A.FAULTY_DATE, A.FAULTY_TYPE, B.BARCODE_NO
		) WOM
		ON WOM.FAULTY_DATE = WSIF.FAULTY_DATE
		AND WOM.FAULTY_TYPE = WSIF.FAULTY_TYPE
		AND WOM.BARCODE_NO = WSIF.BARCODE_NO
		
		LEFT OUTER JOIN TB_ITEM_INFO_ADM IIA
		ON WSIF.ITEM_SEQ = IIA.ITEM_SEQ
		
		LEFT OUTER JOIN TB_UNFIT_ADM UA_TB
		ON WSIF.BARCODE_NO = UA_TB.UNFIT_LOT
		AND WSIF.FAULTY_TYPE = UA_TB.FAULTY_CD
		AND UA_TB.UNFIT_GUBUN = '004'
		
		LEFT OUTER JOIN TB_UNFIT_RESULT_ADM URA
		ON WSIF.FAULTY_TYPE = URA.UNFIT_NO
		AND WSIF.BARCODE_NO = URA.UNFIT_LOT
		
		LEFT OUTER JOIN (
			SELECT FAULTY_DATE, BARCODE_NO, FAULTY_TYPE, SUM(FAULTY_QTY) FAULTY_QTY_SUM
			FROM TB_WORK_SINGLE_ITEM_FAULTY
			GROUP BY FAULTY_DATE, FAULTY_TYPE, BARCODE_NO
		) WSIF_SUB
		ON WSIF.FAULTY_DATE = WSIF_SUB.FAULTY_DATE
		AND WSIF.BARCODE_NO = WSIF_SUB.BARCODE_NO
		AND WSIF.FAULTY_TYPE = WSIF_SUB.FAULTY_TYPE
		
		LEFT OUTER JOIN (
			SELECT BARCODE_NO, SUM(FAULTY_QTY) FAULTY_QTY_WHOLE
			FROM TB_WORK_SINGLE_ITEM_FAULTY
			GROUP BY BARCODE_NO
		) WSIF_ALL
		ON WSIF.BARCODE_NO = WSIF_ALL.BARCODE_NO
		
		WHERE 1=1
		<if test="startDate != null and !startDate.equals('')">
		AND  WSIF.FAULTY_DATE BETWEEN  #{startDate} AND #{endDate}
		AND  WSIF.FAULTY_QTY > 0
		</if>
		<if test="mainGubun != null and !mainGubun.equals('')">
		AND IIA.MAIN_GUBUN = #{mainGubun}
		</if>
		<if test="itemSeq != null and !itemSeq.equals('')">
		AND IIA.ITEM_SEQ = #{itemSeq}
		</if>
		<if test="itemCus != null and !itemCus.equals('')">
		AND IIA.ITEM_CUS = #{itemCus}
		</if>
		<if test="unfitResultNo != null and !unfitResultNo.equals('')">
		AND IIF(URA.UNFIT_RESULT_NO IS NOT NULL, '등록', '미등록') = #{unfitResultNo}
		</if>
		<if test="unfitProc != null and !unfitProc.equals('')">
		AND URA.UNFIT_PROC = #{unfitProc}
		</if>
		
		GROUP BY
			WSIF.FAULTY_DATE
			, IIA.ITEM_CUS
			, PCA.PRCSS_NM
			, IIA.ITEM_MODEL
			, IIA.ITEM_UNIT
			, IIA.ITEM_SEQ
			, IIA.ITEM_CD
			, IIA.ITEM_NM
			, WSIF.FAULTY_TYPE
			, WSIF_SUB.FAULTY_QTY_SUM
			, WSIF.BARCODE_NO
			, UA_TB.CM_APPRO_DATE
			, UA_TB.CM_COMPL_DATE
			, UA_TB.UNFIT_DESC
			, WOM.TOTAL_CONSUMPT
			, URA.UNFIT_RESULT_NO
			, WSIF_ALL.FAULTY_QTY_WHOLE
			, URA.UNFIT_PAIR_CNT
			, URA.UNFIT_FAULTY_CNT
			, URA.UNFIT_OTHER_CNT
			, URA.UNFIT_PROC
			, URA.UNFIT_FAULTY_DATE
	</select>
	
	<!-- 부적합관리현황(수입) 목록조회 -->
	<select id="unfitInspectAdmSituList" resultMap="UnfitAdmVo">
		SELECT
			IIA_TB.IN_SLIP_NO
			, IIA_TB.IN_SLIP_SEQ 
			, IINA_TB.MAIN_GUBUN
			, IIMA_TB.INSPECT_DATE
			, IINA_TB.ITEM_CUS 
			, (SELECT DEAL_CORP_NM FROM TB_DEAL_CORP_ADM X WHERE X.DEAL_CORP_CD = IINA_TB.ITEM_CUS) ITEM_CUS_NM 
			, IINA_TB.ITEM_MODEL
			, (SELECT BASE_NM FROM TB_COMMON_CODE_ADM H WHERE H.BASE_CD = IINA_TB.ITEM_MODEL AND H.BASE_GROUP_CD = '099' ) ITEM_MODEL_NM
			, (SELECT BASE_NM FROM TB_COMMON_CODE_ADM X WHERE X.BASE_CD = IINA_TB.ITEM_UNIT AND X.BASE_GROUP_CD = '036') ITEM_UNIT_NM
			, IINA_TB.ITEM_CD
			, IINA_TB.ITEM_NM
			, IINA_TB.ITEM_SEQ
			, IOWA_TB.BARCODE_NO LOT_NO
			, ISNULL(D.PRE_IN_WHS_QTY, 0) FAIR_QTY
			, IOWA_TB.APPROVAL_CD
			, URA.UNFIT_DESC
			, STRING_AGG(URA.UNFIT_RESULT_NO, ',') AS UNFIT_RESULT_NO
			, MAX(URA.UNFIT_PAIR_CNT) UNFIT_PAIR_CNT
			, MAX(URA.UNFIT_FAULTY_CNT) UNFIT_FAULTY_CNT
			, MAX(URA.UNFIT_OTHER_CNT) UNFIT_OTHER_CNT
			, (SELECT TOP(1) BASE_NM FROM TB_COMMON_CODE_ADM X WHERE X.BASE_CD = MAX(URA.UNFIT_PROC) AND X.BASE_GROUP_CD = '156') UNFIT_PROC_NM
			, MAX(URA.UNFIT_FAULTY_DATE) UNFIT_FAULTY_DATE
		FROM TB_ITEM_INSPECT_ADM IIA_TB
		
		LEFT JOIN TB_IN_OUT_WHS_ADM IOWA_TB
		ON IOWA_TB.IN_SLIP_NO = IIA_TB.IN_SLIP_NO
		AND IOWA_TB.IN_SLIP_SEQ = IIA_TB.IN_SLIP_SEQ
		
		LEFT JOIN TB_ITEM_INSPECT_MASTER_ADM IIMA_TB
		ON IOWA_TB.IN_SLIP_NO = IIMA_TB.IN_SLIP_NO
		
		LEFT JOIN TB_ITEM_INSPECT_FAULTY_TYPE IFA_TB
		ON IIA_TB.IN_SLIP_NO = IFA_TB.IN_SLIP_NO
		AND IIA_TB.IN_SLIP_SEQ = IFA_TB.IN_SLIP_SEQ
		
		LEFT JOIN TB_ITEM_INFO_ADM IINA_TB
		ON IIA_TB.ITEM_SEQ = IINA_TB.ITEM_SEQ
		
		LEFT OUTER JOIN(
			SELECT 
				Z.IN_SLIP_NO
				, SUM(PRE_IN_WHS_QTY) PRE_IN_WHS_QTY
				, SUM(IN_WHS_QTY) IN_WHS_QTY
				, SUM(FAULTY_QTY) FAULTY_QTY
				, MAX(PRE_IN_WHS_DATE) PRE_IN_WHS_DATE
				, MAX(IN_WHS_DATE) IN_WHS_DATE
				, CASE WHEN COUNT(*) = (
					SELECT COUNT(*)
					FROM TB_IN_OUT_WHS_ADM 
					GROUP BY IN_SLIP_NO,APPROVAL_CD
					HAVING APPROVAL_CD = '001'
					AND IN_SLIP_NO = Z.IN_SLIP_NO
				) THEN '검사완료' ELSE '진행중' END STATUS_CD
			FROM TB_IN_OUT_WHS_ADM Z
			GROUP BY Z.IN_SLIP_NO
		)D
		ON D.IN_SLIP_NO = IOWA_TB.IN_SLIP_NO
		
		LEFT OUTER JOIN TB_UNFIT_RESULT_ADM URA
		ON IFA_TB.FAULTY_TYPE_CD = URA.UNFIT_NO
		AND IOWA_TB.BARCODE_NO = URA.UNFIT_LOT
		
		WHERE 1=1
		AND IIF(URA.UNFIT_DESC IS NOT NULL, '등록', '미등록') = '등록'
		AND IIA_TB.QA_EVAL = '002'
		AND FAULTY_TYPE_QTY > 0
		<if test="startDate != null and !startDate.equals('')">
		AND URA.UNFIT_FAULTY_DATE BETWEEN #{startDate} AND #{endDate}
		</if>
		<if test="mainGubun != null and !mainGubun.equals('')">
		AND IINA_TB.MAIN_GUBUN = #{mainGubun}
		</if>
		<if test="itemSeq != null and !itemSeq.equals('')">
		AND IINA_TB.ITEM_SEQ = #{itemSeq}
		</if>
		<if test="itemCus != null and !itemCus.equals('')">
		AND IINA_TB.ITEM_CUS = #{itemCus}
		</if>
		<if test="unfitProc != null and !unfitProc.equals('')">
		AND URA.UNFIT_PROC = #{unfitProc}
		</if>
		
		GROUP BY
			IIA_TB.IN_SLIP_NO
			, IIA_TB.IN_SLIP_SEQ
			, IINA_TB.MAIN_GUBUN
			, IIMA_TB.INSPECT_DATE
			, IINA_TB.ITEM_CUS
			, IINA_TB.ITEM_MODEL
			, IINA_TB.ITEM_UNIT
			, IINA_TB.ITEM_CD
			, IINA_TB.ITEM_NM
			, IINA_TB.ITEM_SEQ
			, IOWA_TB.BARCODE_NO
			, D.PRE_IN_WHS_QTY
			, IOWA_TB.APPROVAL_CD
			, URA.UNFIT_DESC
			
		ORDER BY IIMA_TB.INSPECT_DATE, IOWA_TB.BARCODE_NO
	</select>
	
	<!-- 부적합관리현황(공정) - 사출 목록조회 -->
	<select id="unfitPrcssAdmInjectSituList" resultMap="UnfitAdmVo">
		SELECT
			WOFT.FAULTY_TYPE_DATE INSPECT_DATE
			, IIA_TB.ITEM_CUS
			, (SELECT DEAL_CORP_NM FROM TB_DEAL_CORP_ADM X WHERE X.DEAL_CORP_CD = IIA_TB.ITEM_CUS) ITEM_CUS_NM 
			, (SELECT BASE_NM FROM TB_COMMON_CODE_ADM H WHERE H.BASE_CD = IIA_TB.ITEM_MODEL AND H.BASE_GROUP_CD = '099' ) ITEM_MODEL_NM
			, (SELECT BASE_NM FROM TB_COMMON_CODE_ADM X WHERE X.BASE_CD = IIA_TB.ITEM_UNIT AND X.BASE_GROUP_CD = '036') ITEM_UNIT_NM
			, WOP_TB.MINOR_PRCSS_CD
			, IIA_TB.ITEM_CD
			, IIA_TB.ITEM_NM
			, IIA_TB.ITEM_SEQ
			, WOP_TB.ORD_LOT_NO LOT_NO
			, WOP_TB.OUTPUT_QTY
			, WOP_SUB.FAIR_QTY
			, URA.UNFIT_DESC
			, STRING_AGG(URA.UNFIT_RESULT_NO, ',') UNFIT_RESULT_NO
			, MAX(URA.UNFIT_PROC) UNFIT_PROC
			, MAX(URA.UNFIT_PAIR_CNT) UNFIT_PAIR_CNT
			, MAX(URA.UNFIT_FAULTY_CNT) UNFIT_FAULTY_CNT
			, MAX(URA.UNFIT_OTHER_CNT) UNFIT_OTHER_CNT
			, (SELECT BASE_NM FROM TB_COMMON_CODE_ADM X WHERE X.BASE_CD = MAX(URA.UNFIT_PROC) AND X.BASE_GROUP_CD = '156') UNFIT_PROC_NM
			, MAX(URA.UNFIT_FAULTY_DATE) UNFIT_FAULTY_DATE
		FROM (
			SELECT WORK_ORD_NO, WORK_ORD_SEQ, FAULTY_TYPE_CD, ISNULL(SUM(FAULTY_TYPE_QTY), 0) FAULTY_TYPE_QTY, FAULTY_TYPE_DATE 
			FROM TB_WORK_ORDER_FAULTY_TYPE
			GROUP BY WORK_ORD_NO, WORK_ORD_SEQ, FAULTY_TYPE_CD, FAULTY_TYPE_DATE
		) WOFT
		
		LEFT OUTER JOIN TB_WORK_ORDER_PRCSS WOP_TB
		ON WOP_TB.WORK_ORD_NO = WOFT.WORK_ORD_NO
		AND WOP_TB.WORK_ORD_SEQ = WOFT.WORK_ORD_SEQ
		
		LEFT OUTER JOIN (
			SELECT WORK_ORD_NO, MIDDLE_PRCSS_CD, ISNULL(SUM(FAIR_QTY), 0) FAIR_QTY
			FROM TB_WORK_ORDER_PRCSS
			GROUP BY WORK_ORD_NO, MIDDLE_PRCSS_CD
		) WOP_SUB
		ON WOP_SUB.WORK_ORD_NO = WOP_TB.WORK_ORD_NO
		AND WOP_SUB.MIDDLE_PRCSS_CD = WOP_TB.MIDDLE_PRCSS_CD
		
		LEFT OUTER JOIN TB_ITEM_INFO_ADM IIA_TB
		ON WOP_TB.ITEM_SEQ = IIA_TB.ITEM_SEQ
		
		LEFT OUTER JOIN TB_UNFIT_RESULT_ADM URA
		ON WOFT.FAULTY_TYPE_CD = URA.UNFIT_NO
		AND WOP_TB.ORD_LOT_NO = URA.UNFIT_LOT
		
		WHERE 1=1
		AND IIF(URA.UNFIT_DESC IS NOT NULL, '등록', '미등록') = '등록'
		<if test="startDate != null and !startDate.equals('')">
		AND URA.UNFIT_FAULTY_DATE BETWEEN #{startDate} AND #{endDate}
		AND WOFT.FAULTY_TYPE_QTY > 0
		</if>
		<if test="mainGubun != null and !mainGubun.equals('')">
		AND IIA_TB.MAIN_GUBUN = #{mainGubun}
		</if>
		<if test="itemSeq != null and !itemSeq.equals('')">
		AND IIA_TB.ITEM_SEQ = #{itemSeq}
		</if>
		<if test="itemCus != null and !itemCus.equals('')">
		AND IIA_TB.ITEM_CUS = #{itemCus}
		</if>
		<if test="unfitProc != null and !unfitProc.equals('')">
		AND URA.UNFIT_PROC = #{unfitProc}
		</if>
		
		GROUP BY
			WOFT.FAULTY_TYPE_DATE
			, IIA_TB.ITEM_CUS
			, WOP_TB.MINOR_PRCSS_CD
			, IIA_TB.ITEM_MODEL
			, IIA_TB.ITEM_UNIT
			, IIA_TB.ITEM_CD
			, IIA_TB.ITEM_NM
			, IIA_TB.ITEM_SEQ
			, WOP_TB.OUTPUT_QTY
			, WOP_TB.ORD_LOT_NO
			, WOP_SUB.FAIR_QTY
			, URA.UNFIT_DESC
			
		HAVING 1=1
		
		ORDER BY WOFT.FAULTY_TYPE_DATE
	</select>
	
	<!-- 부적합관리현황(공정) - 봉제 목록조회 -->
	<select id="unfitPrcssAdmSituList" resultMap="UnfitAdmVo">
		SELECT
			WOP_TB.ORD_DATE INSPECT_DATE
			, IIA_TB.ITEM_CUS
			, (SELECT DEAL_CORP_NM FROM TB_DEAL_CORP_ADM X WHERE X.DEAL_CORP_CD = IIA_TB.ITEM_CUS) ITEM_CUS_NM
			, (SELECT BASE_NM FROM TB_COMMON_CODE_ADM H WHERE H.BASE_CD = IIA_TB.ITEM_MODEL AND H.BASE_GROUP_CD = '099' ) ITEM_MODEL_NM
			, (SELECT BASE_NM FROM TB_COMMON_CODE_ADM X WHERE X.BASE_CD = IIA_TB.ITEM_UNIT AND X.BASE_GROUP_CD = '036') ITEM_UNIT_NM
			, WOP_TB.MINOR_PRCSS_CD
			, IIA_TB.ITEM_CD
			, IIA_TB.ITEM_NM
			, IIA_TB.ITEM_SEQ
			, WOP_TB.ORD_LOT_NO LOT_NO
			, WOP_TB.OUTPUT_QTY
			, WOP_SUB.FAIR_QTY
			, URA.UNFIT_DESC
			, STRING_AGG(URA.UNFIT_RESULT_NO, ',') UNFIT_RESULT_NO
			, MAX(URA.UNFIT_PROC) UNFIT_PROC
			, MAX(URA.UNFIT_PAIR_CNT) UNFIT_PAIR_CNT
			, MAX(URA.UNFIT_FAULTY_CNT) UNFIT_FAULTY_CNT
			, MAX(URA.UNFIT_OTHER_CNT) UNFIT_OTHER_CNT
			, (SELECT BASE_NM FROM TB_COMMON_CODE_ADM X WHERE X.BASE_CD = MAX(URA.UNFIT_PROC) AND X.BASE_GROUP_CD = '156') UNFIT_PROC_NM
			, MAX(URA.UNFIT_FAULTY_DATE) UNFIT_FAULTY_DATE
		FROM (
			SELECT WORK_ORD_NO, MIDDLE_PRCSS_CD, FAULTY_TYPE_CD, ISNULL(SUM(FAULTY_TYPE_QTY), 0) FAULTY_TYPE_QTY, FAULTY_TYPE_DATE
			FROM TB_WORK_ORDER_FAULTY_TYPE
			GROUP BY WORK_ORD_NO, MIDDLE_PRCSS_CD, FAULTY_TYPE_CD, FAULTY_TYPE_DATE
		) WOFT
		
		LEFT OUTER JOIN TB_WORK_ORDER_PRCSS WOP_TB
		ON WOP_TB.WORK_ORD_NO = WOFT.WORK_ORD_NO
		AND WOP_TB.MIDDLE_PRCSS_CD = WOFT.MIDDLE_PRCSS_CD
		AND WOP_TB.WORK_STATUS = '003'
		
		LEFT OUTER JOIN (
			SELECT WORK_ORD_NO, MIDDLE_PRCSS_CD, ISNULL(SUM(FAIR_QTY), 0) FAIR_QTY
			FROM TB_WORK_ORDER_PRCSS
			GROUP BY WORK_ORD_NO, MIDDLE_PRCSS_CD
		) WOP_SUB
		ON WOP_SUB.WORK_ORD_NO = WOP_TB.WORK_ORD_NO
		AND WOP_SUB.MIDDLE_PRCSS_CD = WOP_TB.MIDDLE_PRCSS_CD
		
		LEFT OUTER JOIN TB_ITEM_INFO_ADM IIA_TB
		ON WOP_TB.ITEM_SEQ = IIA_TB.ITEM_SEQ
		
		LEFT OUTER JOIN TB_UNFIT_RESULT_ADM URA
		ON WOFT.FAULTY_TYPE_CD = URA.UNFIT_NO
		AND WOP_TB.ORD_LOT_NO = URA.UNFIT_LOT
		
		WHERE 1=1
		AND IIF(URA.UNFIT_DESC IS NOT NULL, '등록', '미등록') = '등록'
		
		<if test="startDate != null and !startDate.equals('')">
		AND URA.UNFIT_FAULTY_DATE BETWEEN #{startDate} AND #{endDate}
		AND WOFT.FAULTY_TYPE_QTY > 0
		</if>
		<if test="mainGubun != null and !mainGubun.equals('')">
		AND IIA_TB.MAIN_GUBUN = #{mainGubun}
		</if>
		<if test="itemSeq != null and !itemSeq.equals('')">
		AND IIA_TB.ITEM_SEQ = #{itemSeq}
		</if>
		<if test="itemCus != null and !itemCus.equals('')">
		AND IIA_TB.ITEM_CUS = #{itemCus}
		</if>
		<if test="unfitProc != null and !unfitProc.equals('')">
		AND URA.UNFIT_PROC = #{unfitProc}
		</if>
		
		GROUP BY
			WOP_TB.ORD_DATE
			, IIA_TB.ITEM_CUS
			, WOP_TB.MINOR_PRCSS_CD
			, IIA_TB.ITEM_MODEL
			, IIA_TB.ITEM_UNIT
			, IIA_TB.ITEM_CD
			, IIA_TB.ITEM_NM
			, IIA_TB.ITEM_SEQ
			, WOP_TB.OUTPUT_QTY
			, WOP_TB.ORD_LOT_NO
			, WOP_SUB.FAIR_QTY
			, URA.UNFIT_DESC
			
		HAVING 1=1
		
		ORDER BY WOP_TB.ORD_DATE
	</select>
	
	<!-- 부적합관리현황(출하) 목록조회 -->
	<select id="unfitCompleteAdmSituList" resultMap="UnfitAdmVo">
		SELECT
			DOD_TB.DO_NO
			, DOD_TB.DO_NO_SEV
			, DOD_TB.INSPECT_DATE
			, IIA_TB.ITEM_SEQ
			, IIA_TB.ITEM_CUS
			, (SELECT DEAL_CORP_NM FROM TB_DEAL_CORP_ADM X WHERE X.DEAL_CORP_CD = IIA_TB.ITEM_CUS) ITEM_CUS_NM
			, (SELECT X.BASE_NM FROM TB_COMMON_CODE_ADM X WHERE X.BASE_CD = IIA_TB.ITEM_MODEL AND X.BASE_GROUP_CD = '099') ITEM_MODEL_NM
			, (SELECT X.BASE_NM FROM TB_COMMON_CODE_ADM X WHERE X.BASE_CD = IIA_TB.ITEM_UNIT AND X.BASE_GROUP_CD = '036') ITEM_UNIT_NM
			, IIA_TB.ITEM_CD
			, IIA_TB.ITEM_NM
			, DOD_TB.LOT_NO
			, DOD_TB.TARGET_QTY FAIR_QTY
			, ICFT.FAULTY_TYPE_QTY FAULTY_QTY
			, URA.UNFIT_DESC
			, STRING_AGG(URA.UNFIT_RESULT_NO, ',') UNFIT_RESULT_NO
			, MAX(URA.UNFIT_PAIR_CNT) UNFIT_PAIR_CNT
			, MAX(URA.UNFIT_FAULTY_CNT) UNFIT_FAULTY_CNT
			, MAX(URA.UNFIT_OTHER_CNT) UNFIT_OTHER_CNT
			, (SELECT BASE_NM FROM TB_COMMON_CODE_ADM X WHERE X.BASE_CD = MAX(URA.UNFIT_PROC) AND X.BASE_GROUP_CD = '156') UNFIT_PROC_NM
			, MAX(URA.UNFIT_FAULTY_DATE) UNFIT_FAULTY_DATE
		FROM TB_DELIVERY_ORDER_DTL DOD_TB
		
		LEFT OUTER JOIN TB_ITEM_COMPLETE_MASTER_ADM ICM_TB
		ON DOD_TB.DO_NO = ICM_TB.DO_NO
		AND DOD_TB.DO_NO_SEV = ICM_TB.DO_NO_SUB
		
		LEFT OUTER JOIN TB_ITEM_COMPLETE_ADM ICA_TB
		ON ICM_TB.DO_NO=ICA_TB.DO_NO
		AND ICM_TB.DO_NO_SUB=ICA_TB.DO_NO_SUB
		
		LEFT OUTER JOIN TB_ITEM_COMPLETE_FAULTY_TYPE ICFT
		ON ICA_TB.DO_NO = ICFT.DO_NO
		AND ICA_TB.DO_NO_SUB = ICFT.DO_NO_SUB
		AND ICA_TB.ICA_SEQ = ICFT.ICA_SEQ
		
		LEFT OUTER JOIN TB_ITEM_INFO_ADM IIA_TB
		ON DOD_TB.ITEM_SEQ = IIA_TB.ITEM_SEQ
		
		LEFT OUTER JOIN TB_UNFIT_RESULT_ADM URA
		ON ICFT.FAULTY_TYPE_CD = URA.UNFIT_NO
		AND DOD_TB.LOT_NO = URA.UNFIT_LOT
		
		WHERE 1=1
		AND IIF(URA.UNFIT_DESC IS NOT NULL, '등록', '미등록') = '등록'
		
		<if test="startDate != null and !startDate.equals('')">
		AND URA.UNFIT_FAULTY_DATE BETWEEN #{startDate} AND #{endDate}
		</if>
		<if test="mainGubun != null and !mainGubun.equals('')">
		AND IIA_TB.MAIN_GUBUN = #{mainGubun}
		</if>
		<if test="itemSeq != null and !itemSeq.equals('')">
		AND IIA_TB.ITEM_SEQ = #{itemSeq}
		</if>
		<if test="itemCus != null and !itemCus.equals('')">
		AND IIA_TB.ITEM_CUS = #{itemCus}
		</if>
		<if test="unfitProc != null and !unfitProc.equals('')">
		AND URA.UNFIT_PROC = #{unfitProc}
		</if>
		
		GROUP BY
			DOD_TB.DO_NO
			, DOD_TB.DO_NO_SEV
			, DOD_TB.INSPECT_DATE
			, IIA_TB.ITEM_SEQ
			, IIA_TB.ITEM_CUS
			, IIA_TB.ITEM_MODEL
			, IIA_TB.ITEM_UNIT
			, IIA_TB.ITEM_CD
			, IIA_TB.ITEM_NM
			, DOD_TB.LOT_NO
			, DOD_TB.TARGET_QTY
			, ICA_TB.PAIR_QTY
			, ICA_TB.FAULTY_QTY
			, ICFT.FAULTY_TYPE_QTY
			, URA.UNFIT_DESC
			
		HAVING 1=1
		AND FAULTY_TYPE_QTY > 0
	</select>
	
	<!-- 부적합관리현황(단가) 목록조회 -->
	<select id="unfitPriceAdmSituList" resultMap="UnfitAdmVo">
		SELECT
			IIA.ITEM_CUS
			, (SELECT DEAL_CORP_NM FROM TB_DEAL_CORP_ADM X WHERE X.DEAL_CORP_CD = IIA.ITEM_CUS) ITEM_CUS_NM 
			, PCA.PRCSS_NM MINOR_PRCSS_CD
			, IIA.ITEM_MODEL
			, (SELECT BASE_NM FROM TB_COMMON_CODE_ADM H WHERE H.BASE_CD = IIA.ITEM_MODEL AND H.BASE_GROUP_CD = '099' ) ITEM_MODEL_NM
			, (SELECT BASE_NM FROM TB_COMMON_CODE_ADM X WHERE X.BASE_CD = IIA.ITEM_UNIT AND X.BASE_GROUP_CD = '036') ITEM_UNIT_NM
			, IIA.ITEM_SEQ
			, IIA.ITEM_CD
			, IIA.ITEM_NM
			, WSIF.BARCODE_NO LOT_NO
			, URA.UNFIT_DESC
			, STRING_AGG(URA.UNFIT_RESULT_NO, ',') UNFIT_RESULT_NO
			, MAX(URA.UNFIT_PAIR_CNT) UNFIT_PAIR_CNT
			, MAX(URA.UNFIT_FAULTY_CNT) UNFIT_FAULTY_CNT
			, MAX(URA.UNFIT_OTHER_CNT) UNFIT_OTHER_CNT
			, (SELECT BASE_NM FROM TB_COMMON_CODE_ADM X WHERE X.BASE_CD = MAX(URA.UNFIT_PROC) AND X.BASE_GROUP_CD = '156') UNFIT_PROC_NM
			, MAX(URA.UNFIT_FAULTY_DATE) UNFIT_FAULTY_DATE
		FROM (
			SELECT FAULTY_DATE, FAULTY_TYPE, WORK_ORD_NO,BARCODE_NO, WORK_PROG_NO, ITEM_SEQ, SUM(FAULTY_QTY) FAULTY_QTY
			FROM TB_WORK_SINGLE_ITEM_FAULTY
			GROUP BY FAULTY_DATE, FAULTY_TYPE, WORK_ORD_NO, BARCODE_NO, WORK_PROG_NO, ITEM_SEQ
		) WSIF
		
		LEFT OUTER JOIN TB_WORK_ORDER_PROGRESS WOP
		ON WSIF.WORK_PROG_NO = WOP.WORK_PROG_NO
		
		LEFT OUTER JOIN TB_PRCSS_CODE_ADM PCA
		ON WOP.MINOR_PRCSS_CD = PCA.PRCSS_CD
		AND PCA.PRCSS_TYPE = '001'
		AND PRCSS_CD = LOWER_PRCSS_CD
		
		LEFT OUTER JOIN (
			SELECT A.FAULTY_DATE, A.FAULTY_TYPE,B.BARCODE_NO, MAX(TOTAL_CONSUMPT) TOTAL_CONSUMPT
			FROM TB_WORK_SINGLE_ITEM_FAULTY A
			LEFT OUTER JOIN TB_WORK_ORDER_MATRL B
			ON B.BARCODE_NO = A.BARCODE_NO
			AND B.WORK_ORD_NO = A.WORK_ORD_NO
			GROUP BY A.FAULTY_DATE, A.FAULTY_TYPE, B.BARCODE_NO
		) WOM
		ON WOM.FAULTY_DATE = WSIF.FAULTY_DATE
		AND WOM.FAULTY_TYPE = WSIF.FAULTY_TYPE
		AND WOM.BARCODE_NO = WSIF.BARCODE_NO
		
		LEFT OUTER JOIN TB_ITEM_INFO_ADM IIA
		ON WSIF.ITEM_SEQ = IIA.ITEM_SEQ
		
		LEFT OUTER JOIN TB_UNFIT_RESULT_ADM URA
		ON WSIF.FAULTY_TYPE = URA.UNFIT_NO
		AND WSIF.BARCODE_NO = URA.UNFIT_LOT
		
		WHERE 1=1
		AND IIF(URA.UNFIT_DESC IS NOT NULL, '등록', '미등록') = '등록'
		
		<if test="startDate != null and !startDate.equals('')">
		AND URA.UNFIT_FAULTY_DATE BETWEEN #{startDate} AND #{endDate}
		AND WSIF.FAULTY_QTY > 0
		</if>
		<if test="mainGubun != null and !mainGubun.equals('')">
		AND IIA.MAIN_GUBUN = #{mainGubun}
		</if>
		<if test="itemSeq != null and !itemSeq.equals('')">
		AND IIA.ITEM_SEQ = #{itemSeq}
		</if>
		<if test="itemCus != null and !itemCus.equals('')">
		AND IIA.ITEM_CUS = #{itemCus}
		</if>
		<if test="unfitProc != null and !unfitProc.equals('')">
		AND URA.UNFIT_PROC = #{unfitProc}
		</if>
		
		GROUP BY
			IIA.ITEM_CUS
			, PCA.PRCSS_NM
			, IIA.ITEM_MODEL
			, IIA.ITEM_UNIT
			, IIA.ITEM_SEQ
			, IIA.ITEM_CD
			, IIA.ITEM_NM
			, WSIF.BARCODE_NO
			, URA.UNFIT_DESC
	</select>
	
	<!-- 부적합관리대장(수입,공정,출하) 등록 -->
	<insert id="unfitAdmCreate">
		INSERT INTO TB_UNFIT_ADM(
			UNFIT_NO,
			UNFIT_GUBUN,
			UNFIT_LOT,
			FAULTY_CD,
			UNFIT_PROC,
			UNFIT_DATE,
			UNFIT_MANAGER,
			CM_APPRO_DATE,
			CM_COMPL_DATE,
			UNFIT_DESC,
			REG_ID,
			REG_DATE
		) 
		VALUES(
			#{unfitNo},
			#{unfitGubun},
			#{unfitLot},
			#{faultyCd},
			#{unfitProc},
			#{unfitDate},
			#{unfitManager},
			#{cmApproDate},
			#{cmComplDate},
			#{unfitDesc},
			#{regId},
			getDate()
		)
	</insert>
	
	<!-- 부적합관리대장(수입,공정,출하) 수정 -->
	<update id="unfitAdmUpdate">
		UPDATE	TB_UNFIT_ADM 
		SET	UNFIT_GUBUN = #{unfitGubun},
			UNFIT_LOT = #{unfitLot},
			FAULTY_CD = #{faultyCd},
			UNFIT_PROC = #{unfitProc},
			UNFIT_DATE = #{unfitDate},
			UNFIT_MANAGER = #{unfitManager},
			CM_APPRO_DATE = #{cmApproDate},
			CM_COMPL_DATE = #{cmComplDate},
			UNFIT_DESC = #{unfitDesc},
			UPD_ID = #{updId},
			UPD_DATE = getDate()
		WHERE	1=1
		AND	UNFIT_LOT = #{unfitLot}
		AND	UNFIT_GUBUN = #{unfitGubun}
		AND FAULTY_CD = #{faultyCd}
	</update>
	
	<!-- 부적합관리대장(수입,공정,출하) 중복확인 -->
	<select id="unfitAdmCheck" resultType="Integer">
		SELECT 
			COUNT(*) 
		FROM TB_UNFIT_ADM 
		WHERE	1=1
		<if test="unfitLot!=null and !unfitLot.equals('')">
		AND	UNFIT_LOT = #{unfitLot}
		</if>
		<if test="unfitGubun!=null and !unfitGubun.equals('')">
		AND	UNFIT_GUBUN = #{unfitGubun}
		</if>
		<if test="faultyCd!=null and !faultyCd.equals('')">
		AND FAULTY_CD = #{faultyCd}
		</if>
	</select>
	
	<!-- 부적합번호 생성 -->
	<select id="getUnfitNo" resultType="String">
		SELECT 
			ISNULL(RIGHT('000' + CAST(MAX(RIGHT(UNFIT_NO, 3)) + 1 AS NVARCHAR), 3), '001') 
		FROM TB_UNFIT_ADM 
		WHERE SUBSTRING(UNFIT_NO, 1, 8) = #{unfitToday}
	</select>
	
	<!-- 불량유형 합계(공정) - 사출 -->
	<select id="faultyTypeTotalInjectList" resultMap="UnfitAdmVo">
		SELECT
			FAULTY_TYPE_CD FAULTY_CD
			, (SELECT BS.BASE_INFO_NM FROM TB_BASE_INFO_ADM BS WHERE BS.BASE_INFO_TYPE = 'FT' AND BS.BASE_INFO_CD = FAULTY_TYPE_CD) FAULTY_DTL
			, SUM(FAULTY_TYPE_QTY) FAULTY_CNT
		FROM TB_WORK_ORDER_FAULTY_TYPE FT
		
		LEFT OUTER JOIN TB_WORK_ORDER_PRCSS WO
		ON FT.WORK_ORD_NO = WO.WORK_ORD_NO
		AND FT.WORK_ORD_SEQ = WO.WORK_ORD_SEQ
		
		LEFT OUTER JOIN TB_ITEM_INFO_ADM C
		ON WO.ITEM_SEQ = C.ITEM_SEQ
		
		WHERE 1=1
		AND FT.FAULTY_TYPE_DATE BETWEEN #{startDate} AND #{endDate}
		AND C.MAIN_GUBUN = #{mainGubun}
		GROUP BY FAULTY_TYPE_CD, WORK_STATUS
		ORDER BY FAULTY_CNT DESC
	</select>
	
	<!-- 불량유형 합계(공정) - 봉제 -->
	<select id="faultyTypeTotalList" resultMap="UnfitAdmVo">
		SELECT
			FAULTY_TYPE_CD FAULTY_CD
			, (SELECT BS.BASE_INFO_NM FROM TB_BASE_INFO_ADM BS WHERE BS.BASE_INFO_TYPE = 'FT' AND BS.BASE_INFO_CD = FAULTY_TYPE_CD) FAULTY_DTL
			, SUM(FAULTY_TYPE_QTY) FAULTY_CNT
		FROM TB_WORK_ORDER_FAULTY_TYPE FT
		
		LEFT OUTER JOIN TB_WORK_ORDER_PRCSS WO
		ON FT.WORK_ORD_NO = WO.WORK_ORD_NO
		AND FT.MIDDLE_PRCSS_CD = WO.MIDDLE_PRCSS_CD
		AND FT.WORK_ORD_SEQ = WO.WORK_ORD_SEQ
		
		LEFT OUTER JOIN TB_ITEM_INFO_ADM C
		ON WO.ITEM_SEQ = C.ITEM_SEQ
		
		LEFT OUTER JOIN TB_UNFIT_RESULT_ADM URA
		ON FT.FAULTY_TYPE_CD = URA.UNFIT_NO
		AND WO.ORD_LOT_NO = URA.UNFIT_LOT
		
		WHERE 1=1
		AND FAULTY_TYPE_DATE BETWEEN #{startDate} AND #{endDate}
		AND C.MAIN_GUBUN = #{mainGubun}
		<if test="itemSeq != null and !itemSeq.equals('')">
		AND C.ITEM_SEQ = #{itemSeq}
		</if>
		<if test="itemCus != null and !itemCus.equals('')">
		AND C.ITEM_CUS = #{itemCus}
		</if>
		<if test="unfitResultNo != null and !unfitResultNo.equals('')">
		AND IIF(URA.UNFIT_RESULT_NO IS NOT NULL, '등록', '미등록') = #{unfitResultNo}
		</if>
		<if test="unfitProc != null and !unfitProc.equals('')">
		AND URA.UNFIT_PROC = #{unfitProc}
		</if>
		
		GROUP BY FAULTY_TYPE_CD, WORK_STATUS
		HAVING WORK_STATUS = '003'
		
		ORDER BY FAULTY_CNT DESC
	</select>
	
	<!-- 불량유형 합계(수입) -->
	<select id="faultyTypeTotalList2" resultMap="UnfitAdmVo">
		SELECT
			FAULTY_TYPE_CD
			, (SELECT BS.BASE_INFO_NM FROM TB_BASE_INFO_ADM BS WHERE BS.BASE_INFO_TYPE = 'FT' AND BS.BASE_INFO_CD = FAULTY_TYPE_CD) FAULTY_DTL
			, SUM(FAULTY_TYPE_QTY) FAULTY_CNT
		FROM TB_ITEM_INSPECT_FAULTY_TYPE A
		
		LEFT OUTER JOIN TB_ITEM_INSPECT_MASTER_ADM B
		ON A.IN_SLIP_NO=B.IN_SLIP_NO
		
		LEFT JOIN TB_ITEM_INFO_ADM C
		ON B.ITEM_SEQ = C.ITEM_SEQ
		
		LEFT JOIN TB_IN_OUT_WHS_ADM IOWA_TB
		ON B.IN_SLIP_NO = IOWA_TB.IN_SLIP_NO
		
		LEFT OUTER JOIN TB_UNFIT_RESULT_ADM URA
		ON A.FAULTY_TYPE_CD = URA.UNFIT_NO
		AND IOWA_TB.BARCODE_NO = URA.UNFIT_LOT
		
		WHERE 1=1
		AND B.INSPECT_DATE BETWEEN #{startDate} AND #{endDate}
		AND C.MAIN_GUBUN = #{mainGubun}
		<if test="itemSeq != null and !itemSeq.equals('')">
		AND C.ITEM_SEQ = #{itemSeq}
		</if>
		<if test="itemCus != null and !itemCus.equals('')">
		AND C.ITEM_CUS = #{itemCus}
		</if>
		<if test="unfitResultNo != null and !unfitResultNo.equals('')">
		AND IIF(URA.UNFIT_RESULT_NO IS NOT NULL, '등록', '미등록') = #{unfitResultNo}
		</if>
		<if test="unfitProc != null and !unfitProc.equals('')">
		AND URA.UNFIT_PROC = #{unfitProc}
		</if>
		
		GROUP BY FAULTY_TYPE_CD
		
		HAVING SUM(FAULTY_TYPE_QTY) > 0
		
		ORDER BY FAULTY_CNT DESC
	</select>
	
	<!-- 불량유형 합계(출하) -->
	<select id="faultyTypeTotalList3" resultMap="UnfitAdmVo">
		SELECT 
			FAULTY_TYPE_CD
			, (SELECT BS.BASE_INFO_NM FROM TB_BASE_INFO_ADM BS WHERE BS.BASE_INFO_TYPE = 'FT' AND BS.BASE_INFO_CD = FAULTY_TYPE_CD) FAULTY_DTL
			, SUM(FAULTY_TYPE_QTY) FAULTY_CNT
		FROM TB_ITEM_COMPLETE_FAULTY_TYPE A
		
		LEFT OUTER JOIN TB_DELIVERY_ORDER_DTL B
		ON A.DO_NO = B.DO_NO
		AND A.DO_NO_SUB = B.DO_NO_SEV
		
		LEFT OUTER JOIN TB_ITEM_INFO_ADM C
		ON B.ITEM_SEQ = C.ITEM_SEQ
		
		LEFT OUTER JOIN TB_UNFIT_RESULT_ADM URA
		ON A.FAULTY_TYPE_CD = URA.UNFIT_NO
		AND B.LOT_NO = URA.UNFIT_LOT
		
		WHERE 1=1
		AND B.INSPECT_DATE BETWEEN #{startDate} AND #{endDate}
		AND C.MAIN_GUBUN = #{mainGubun}
		<if test="itemSeq != null and !itemSeq.equals('')">
		AND C.ITEM_SEQ = #{itemSeq}
		</if>
		<if test="itemCus != null and !itemCus.equals('')">
		AND C.ITEM_CUS = #{itemCus}
		</if>
		<if test="unfitResultNo != null and !unfitResultNo.equals('')">
		AND IIF(URA.UNFIT_RESULT_NO IS NOT NULL, '등록', '미등록') = #{unfitResultNo}
		</if>
		<if test="unfitProc != null and !unfitProc.equals('')">
		AND URA.UNFIT_PROC = #{unfitProc}
		</if>
		
		GROUP BY FAULTY_TYPE_CD
		
		HAVING SUM(FAULTY_TYPE_QTY) > 0
		
		ORDER BY FAULTY_CNT DESC
	</select>
	
	<select id="faultyTypeTotalList4" resultMap="UnfitAdmVo">
		SELECT
			A.FAULTY_TYPE FAULTY_CD
			, (SELECT BS.BASE_INFO_NM FROM TB_BASE_INFO_ADM BS WHERE BS.BASE_INFO_TYPE = 'FT' AND BS.BASE_INFO_CD = A.FAULTY_TYPE) FAULTY_DTL
			, SUM(A.FAULTY_QTY) FAULTY_CNT
		FROM TB_WORK_SINGLE_ITEM_FAULTY A
		
		LEFT OUTER JOIN TB_ITEM_INFO_ADM B
		ON A.ITEM_SEQ= B.ITEM_SEQ
		
		LEFT OUTER JOIN TB_UNFIT_RESULT_ADM URA
		ON A.FAULTY_TYPE = URA.UNFIT_NO
		AND A.BARCODE_NO = URA.UNFIT_LOT
		
		WHERE 1=1
		AND A.FAULTY_DATE BETWEEN #{startDate} AND #{endDate}
		AND B.MAIN_GUBUN = #{mainGubun}
		<if test="itemSeq != null and !itemSeq.equals('')">
		AND B.ITEM_SEQ = #{itemSeq}
		</if>
		<if test="itemCus != null and !itemCus.equals('')">
		AND B.ITEM_CUS = #{itemCus}
		</if>
		<if test="unfitResultNo != null and !unfitResultNo.equals('')">
		AND IIF(URA.UNFIT_RESULT_NO IS NOT NULL, '등록', '미등록') = #{unfitResultNo}
		</if>
		<if test="unfitProc != null and !unfitProc.equals('')">
		AND URA.UNFIT_PROC = #{unfitProc}
		</if>
		
		GROUP BY A.FAULTY_TYPE
		
		HAVING SUM(A.FAULTY_QTY) > 0
		
		ORDER BY FAULTY_CNT DESC
	</select>
	
	<!-- 불량cavity -->
	<select id="faultyTypeCavityList" resultMap="UnfitAdmVo">
		SELECT 
			WOF.FAULTY_CAVITY,
			SUM(ISNULL(WOF.FAULTY_TYPE_QTY,0)) FAULTY_QTY
		FROM TB_WORK_ORDER_FAULTY_TYPE WOF
		LEFT OUTER JOIN TB_WORK_ORDER_PRCSS  WO
		ON WOF.WORK_ORD_NO=WO.WORK_ORD_NO
		WHERE 1=1
		AND WOF.FAULTY_TYPE_CD=#{faultyCd}
		AND WOF.FAULTY_TYPE_DATE BETWEEN #{startDate} AND #{endDate}
		GROUP BY WOF.FAULTY_CAVITY, WORK_STATUS
		HAVING WORK_STATUS = '003'
	</select>
	
		
	<!-- 부적합관리대장(봉제) 결과 등록 -->
	<insert id="unfitResultCreate">
		INSERT INTO TB_UNFIT_RESULT_ADM(
			UNFIT_NO,
			UNFIT_GUBUN,
			ITEM_SEQ,
			ITEM_CUS,
			UNFIT_LOT,
			UNFIT_PROC,
			UNFIT_FAULTY_DATE,
			UNFIT_FAULTY_CHARGR,
			UNFIT_PAIR_CNT,
			UNFIT_FAULTY_CNT,
			UNFIT_OTHER_CNT,
			UNFIT_DESC,
			REG_ID,
			REG_DATE
		) 
		VALUES(
			#{unfitNo},
			#{unfitGubun},
			#{itemSeq},
			#{itemCus},
			#{unfitLot},
			#{unfitProc},
			#{unfitFaultyDate},
			#{unfitFaultyChargr},
			#{unfitPairCnt},
			#{unfitFaultyCnt},
			#{unfitOtherCnt},
			#{unfitDesc},
			#{regId},
			getDate()
		)
	</insert>
	
	<!-- 부적합관리대장(봉제) 결과 리스트 등록 -->
	<insert id="unfitResultListCreate" parameterType="java.util.List">
		INSERT INTO TB_UNFIT_RESULT_ADM(
			UNFIT_NO,
			UNFIT_GUBUN,
			ITEM_SEQ,
			ITEM_CUS,
			UNFIT_LOT,
			UNFIT_PROC,
			UNFIT_FAULTY_DATE,
			UNFIT_FAULTY_CHARGR,
			UNFIT_PAIR_CNT,
			UNFIT_FAULTY_CNT,
			UNFIT_OTHER_CNT,
			UNFIT_DESC,
			REG_ID,
			REG_DATE
		) 
		VALUES
		<foreach collection="list" item="item" separator=",">
		(
			#{item.unfitNo},
			#{item.unfitGubun},
			#{item.itemSeq},
			#{item.itemCus},
			#{item.unfitLot},
			#{item.unfitProc},
			#{item.unfitFaultyDate},
			#{item.unfitFaultyChargr},
			#{item.unfitPairCnt},
			#{item.unfitFaultyCnt},
			#{item.unfitOtherCnt},
			#{item.unfitDesc},
			#{item.regId},
			getDate()
		)
		</foreach>
	</insert>
	
	<!-- 부적합관리대장(봉제) 결과 수정 -->
	<update id="unfitResultUpdate">
		UPDATE	TB_UNFIT_RESULT_ADM 
		SET
			UNFIT_PROC = #{unfitProc},
			UNFIT_FAULTY_DATE = #{unfitFaultyDate},
			UNFIT_FAULTY_CHARGR = #{unfitFaultyChargr},
			UNFIT_PAIR_CNT = #{unfitPairCnt},
			UNFIT_FAULTY_CNT = #{unfitFaultyCnt},
			UNFIT_OTHER_CNT = #{unfitOtherCnt},
			UNFIT_DESC = #{unfitDesc},
			UPD_ID = #{updId},
			UPD_DATE = getDate()
		WHERE	1=1
		AND	UNFIT_RESULT_NO = #{unfitResultNo}
	</update>
	
	<!-- 부적합관리현황(봉제) 결과 수정 -->
	<update id="unfitResultUpdate2">
		UPDATE	TB_UNFIT_RESULT_ADM 
		SET
			UNFIT_PROC = #{unfitProc},
			UNFIT_FAULTY_DATE = #{unfitFaultyDate},
			UNFIT_FAULTY_CHARGR = #{unfitFaultyChargr},
			UNFIT_PAIR_CNT = #{unfitPairCnt},
			UNFIT_FAULTY_CNT = #{unfitFaultyCnt},
			UNFIT_OTHER_CNT = #{unfitOtherCnt},
			UNFIT_DESC = #{unfitDesc},
			UPD_ID = #{updId},
			UPD_DATE = getDate()
		WHERE	1=1
		AND	UNFIT_RESULT_NO IN
		<foreach collection="unfitResultNoArray" item="arr" open="(" separator="," close=")">
	        #{arr}
	    </foreach>
	</update>
	
	<!-- 부적합관리대장(봉제) 결과 삭제 -->
	<delete id="unfitResultDelete">
		<if test="unfitResultNoArray != null and unfitResultNoArray.length > 0">
		    DELETE TB_UNFIT_RESULT_ADM
		    WHERE UNFIT_RESULT_NO IN
		    <foreach collection="unfitResultNoArray" item="arr" open="(" separator="," close=")">
		        #{arr}
		    </foreach>
		</if>
	</delete>
	
	<!-- 부적합관리대장 조회 -->
	<select id="unfitResultList" resultMap="UnfitAdmVo">
		SELECT	
			URA_TB.UNFIT_RESULT_NO
			, URA_TB.UNFIT_NO
			, (SELECT BASE_INFO_NM FROM TB_BASE_INFO_ADM X WHERE X.BASE_INFO_TYPE = 'FT' AND X.BASE_INFO_CD = URA_TB.UNFIT_NO) FAULTY_DTL
			, URA_TB.UNFIT_GUBUN
			, URA_TB.ITEM_SEQ
			, IIA_TB.ITEM_CD
			, IIA_TB.ITEM_NM
			, (SELECT BASE_NM FROM TB_COMMON_CODE_ADM X WHERE X.BASE_CD = IIA_TB.ITEM_UNIT AND X.BASE_GROUP_CD = '036') ITEM_UNIT_NM
			, URA_TB.ITEM_CUS
			, URA_TB.UNFIT_LOT
			, URA_TB.UNFIT_PROC
			, URA_TB.UNFIT_FAULTY_DATE
			, URA_TB.UNFIT_FAULTY_CHARGR
			, URA_TB.UNFIT_PAIR_CNT
			, URA_TB.UNFIT_FAULTY_CNT
			, URA_TB.UNFIT_OTHER_CNT
			, URA_TB.UNFIT_DESC
			, URA_TB.REG_ID
			, URA_TB.REG_DATE
			, URA_TB.UPD_ID
			, URA_TB.UPD_DATE
		FROM TB_UNFIT_RESULT_ADM URA_TB
		INNER JOIN TB_ITEM_INFO_ADM IIA_TB
		ON URA_TB.ITEM_SEQ = IIA_TB.ITEM_SEQ
		WHERE 1=1
		<if test='itemSeq != null and !itemSeq.equals("")'>
		AND URA_TB.ITEM_SEQ = #{itemSeq}
		</if>
		<if test='unfitGubun != null and !unfitGubun.equals("")'>
		AND URA_TB.UNFIT_GUBUN = #{unfitGubun}
		</if>
		<if test='unfitFaultyDateM != null and !unfitFaultyDateM.equals("")'>
		AND LEFT(URA_TB.UNFIT_FAULTY_DATE, 6) <![CDATA[<=]]> #{unfitFaultyDateM}
		</if>
		<if test="unfitResultNoArray != null and unfitResultNoArray.length > 0">
			AND URA_TB.UNFIT_RESULT_NO IN
			<foreach collection="unfitResultNoArray" item="arr" open="(" separator="," close=")">
				#{arr}
			</foreach>
		</if>
		<if test="unfitNoAndLotArray != null and unfitNoAndLotArray.length > 0">
			AND CONCAT(URA_TB.UNFIT_NO, '|', URA_TB.UNFIT_LOT) IN
			<foreach collection="unfitNoAndLotArray" item="arr" open="(" separator="," close=")">
				#{arr}
			</foreach>
		</if>
	</select>
	
	<!-- 부적합관리대장 조회 -->
	<select id="unfitResultStatusList" resultMap="UnfitAdmVo">
		SELECT	
			URA_TB.UNFIT_GUBUN
			, URA_TB.ITEM_SEQ
			, IIA_TB.ITEM_CD
			, IIA_TB.ITEM_NM
			, (SELECT BASE_NM FROM TB_COMMON_CODE_ADM X WHERE X.BASE_CD = IIA_TB.ITEM_UNIT AND X.BASE_GROUP_CD = '036') ITEM_UNIT_NM
			, STUFF((
					SELECT ',' + (SELECT BASE_INFO_NM FROM TB_BASE_INFO_ADM X WHERE X.BASE_INFO_TYPE = 'FT' AND X.BASE_INFO_CD = Z.UNFIT_NO)
					FROM TB_UNFIT_RESULT_ADM Z
					WHERE 1=1
					<if test="unfitResultNoArray != null and unfitResultNoArray.length > 0">
						AND Z.UNFIT_RESULT_NO IN
						<foreach collection="unfitResultNoArray" item="arr" open="(" separator="," close=")">
							#{arr}
						</foreach>
					</if>
					AND Z.UNFIT_LOT=URA_TB.UNFIT_LOT
					FOR XML PATH('')
				), 1, 1, '') FAULTY_DTL
			, URA_TB.ITEM_CUS
			, URA_TB.UNFIT_LOT
			, URA_TB.UNFIT_PROC
			, URA_TB.UNFIT_FAULTY_DATE
			, URA_TB.UNFIT_FAULTY_CHARGR
			, URA_TB.UNFIT_PAIR_CNT
			, URA_TB.UNFIT_FAULTY_CNT
			, URA_TB.UNFIT_OTHER_CNT
			, URA_TB.UNFIT_DESC
			, STUFF((
					SELECT ',' + CONVERT(VARCHAR,Z.UNFIT_RESULT_NO)
					FROM TB_UNFIT_RESULT_ADM Z
					WHERE 1=1
					<if test="unfitResultNoArray != null and unfitResultNoArray.length > 0">
						AND Z.UNFIT_RESULT_NO IN
						<foreach collection="unfitResultNoArray" item="arr" open="(" separator="," close=")">
							#{arr}
						</foreach>
					</if>
					AND Z.UNFIT_LOT=URA_TB.UNFIT_LOT
					FOR XML PATH('')
				), 1, 1, '') UNFIT_RESULT_NO
		FROM TB_UNFIT_RESULT_ADM URA_TB
		INNER JOIN TB_ITEM_INFO_ADM IIA_TB
		ON URA_TB.ITEM_SEQ = IIA_TB.ITEM_SEQ
		WHERE 1=1
		<if test="unfitResultNoArray != null and unfitResultNoArray.length > 0">
			AND URA_TB.UNFIT_RESULT_NO IN
			<foreach collection="unfitResultNoArray" item="arr" open="(" separator="," close=")">
				#{arr}
			</foreach>
		</if>
		
		<if test="startDate != null and !startDate.equals('')">
		AND URA_TB.UNFIT_FAULTY_DATE BETWEEN #{startDate} AND #{endDate}
		</if>
		<if test="mainGubun != null and !mainGubun.equals('')">
		AND IIA_TB.MAIN_GUBUN = #{mainGubun}
		</if>
		<if test="itemSeq != null and !itemSeq.equals('')">
		AND IIA_TB.ITEM_SEQ = #{itemSeq}
		</if>
		<if test="itemCus != null and !itemCus.equals('')">
		AND IIA_TB.ITEM_CUS = #{itemCus}
		</if>
		<if test="unfitProc != null and !unfitProc.equals('')">
		AND URA_TB.UNFIT_PROC = #{unfitProc}
		</if>
		
		GROUP BY URA_TB.UNFIT_GUBUN,
			URA_TB.ITEM_SEQ,
			ITEM_CD,
			ITEM_NM,
			IIA_TB.ITEM_UNIT,
			URA_TB.ITEM_CUS,
			UNFIT_LOT,
			URA_TB.UNFIT_PROC,
			UNFIT_FAULTY_DATE,
			UNFIT_FAULTY_CHARGR,
			UNFIT_PAIR_CNT,
			UNFIT_FAULTY_CNT,
			UNFIT_OTHER_CNT,
			UNFIT_DESC

	</select>
	
	<!-- 부적합관리대장 상세조회 -->
	<select id="unfitResultRead" resultMap="UnfitAdmVo">
		select 
			UNFIT_RESULT_NO
			, UNFIT_NO
			, UNFIT_LOT
			, UNFIT_PROC
			, UNFIT_FAULTY_DATE
			, UNFIT_FAULTY_CHARGR
			, (SELECT USER_NM FROM TB_USER X WHERE X.USER_NUMBER = UNFIT_FAULTY_CHARGR) UNFIT_FAULTY_CHARGR_NM
			, UNFIT_PAIR_CNT
			, UNFIT_FAULTY_CNT
			, UNFIT_DESC
			, REG_ID
			, REG_DATE
			, UPD_ID
			, UPD_DATE
		from TB_UNFIT_RESULT_ADM
		WHERE UNFIT_RESULT_NO = #{unfitResultNo}	
	</select>
	
	<!-- 부적합관리대장(사출) 우측 불량유형별 품명 조회 -->
	<select id="unfitFaultyRight001List" resultMap="UnfitAdmVo">
		SELECT
			 IIA_TB.ITEM_CD
			, IIA_TB.ITEM_NM
			, IIA_TB.ITEM_SEQ
			, WOFT.FAULTY_TYPE_CD FAULTY_CD
			, (SELECT BS.BASE_INFO_NM FROM TB_BASE_INFO_ADM BS WHERE BS.BASE_INFO_TYPE = 'FT' AND BS.BASE_INFO_CD = WOFT.FAULTY_TYPE_CD) FAULTY_DTL
			, SUM(TEST.FAULTY_QTY_SUM) FAULTY_QTY
		FROM (
			SELECT WORK_ORD_NO, WORK_ORD_SEQ, FAULTY_TYPE_CD, ISNULL(SUM(FAULTY_TYPE_QTY), 0) FAULTY_TYPE_QTY, FAULTY_TYPE_DATE 
			FROM TB_WORK_ORDER_FAULTY_TYPE
			GROUP BY WORK_ORD_NO, WORK_ORD_SEQ, FAULTY_TYPE_CD, FAULTY_TYPE_DATE
		) WOFT
		LEFT OUTER JOIN TB_WORK_ORDER_PRCSS WOP_TB
		ON WOP_TB.WORK_ORD_NO = WOFT.WORK_ORD_NO
		AND WOP_TB.WORK_ORD_SEQ = WOFT.WORK_ORD_SEQ
		LEFT OUTER JOIN (
			SELECT T.INSPECT_DATE, T.LOT_NO, T.FAULTY_CD, SUM(T.FAULTY_QTY) FAULTY_QTY_SUM
			FROM (
				SELECT WOFT.FAULTY_TYPE_DATE INSPECT_DATE, WOP_TB.ORD_LOT_NO LOT_NO, WOFT.FAULTY_TYPE_CD FAULTY_CD, WOFT.FAULTY_TYPE_QTY FAULTY_QTY
				FROM (
					SELECT WORK_ORD_NO, MIDDLE_PRCSS_CD, WORK_ORD_SEQ, FAULTY_TYPE_CD, ISNULL(SUM(FAULTY_TYPE_QTY), 0) FAULTY_TYPE_QTY, FAULTY_TYPE_DATE
					FROM TB_WORK_ORDER_FAULTY_TYPE
					GROUP BY WORK_ORD_NO, MIDDLE_PRCSS_CD, WORK_ORD_SEQ, FAULTY_TYPE_CD, FAULTY_TYPE_DATE
				) WOFT
				LEFT OUTER JOIN TB_WORK_ORDER_PRCSS WOP_TB
				ON WOP_TB.WORK_ORD_NO = WOFT.WORK_ORD_NO
				AND WOP_TB.WORK_ORD_SEQ = WOFT.WORK_ORD_SEQ
				WHERE 1=1
				GROUP BY WOFT.FAULTY_TYPE_DATE, WOFT.FAULTY_TYPE_CD, WOP_TB.ORD_LOT_NO, WOFT.FAULTY_TYPE_QTY
				HAVING 1=1
				AND FAULTY_TYPE_QTY > 0
			) T
			WHERE 1=1
			
			AND T.INSPECT_DATE BETWEEN #{startDate} AND #{endDate}
			
			GROUP BY T.INSPECT_DATE, T.LOT_NO, T.FAULTY_CD
		) TEST
		ON TEST.INSPECT_DATE = WOFT.FAULTY_TYPE_DATE
		AND TEST.LOT_NO = WOP_TB.ORD_LOT_NO
		AND TEST.FAULTY_CD = WOFT.FAULTY_TYPE_CD
		LEFT OUTER JOIN TB_ITEM_INFO_ADM IIA_TB
		ON WOP_TB.ITEM_SEQ = IIA_TB.ITEM_SEQ
		WHERE 1=1
		
		AND WOFT.FAULTY_TYPE_DATE BETWEEN #{startDate} AND #{endDate}
		AND WOFT.FAULTY_TYPE_QTY > 0
		AND IIA_TB.MAIN_GUBUN = #{mainGubun}
		GROUP BY
			IIA_TB.ITEM_CD
			, IIA_TB.ITEM_NM
			, IIA_TB.ITEM_SEQ
			, WOFT.FAULTY_TYPE_CD
		HAVING 1=1
		AND WOFT.FAULTY_TYPE_CD=#{faultyCd}
		ORDER BY IIA_TB.ITEM_NM ASC
	</select>
	
	<!-- 부적합관리대장(봉제) 우측 불량유형별 품명 조회 -->
	<select id="unfitFaultyRight002List" resultMap="UnfitAdmVo">
		SELECT 
			T.ITEM_CD
			, T.ITEM_NM
			, T.ITEM_SEQ
			, T.FAULTY_CD
			, T.FAULTY_DTL
			, SUM(T.FAULTY_QTY_SUM) FAULTY_QTY
		FROM (
			SELECT
				WOP_TB.ORD_DATE INSPECT_DATE
				, IIA_TB.ITEM_CD
				, IIA_TB.ITEM_NM
				, IIA_TB.ITEM_SEQ
				, WOP_TB.ORD_LOT_NO LOT_NO
				, WOFT.FAULTY_TYPE_CD FAULTY_CD
				, (SELECT BS.BASE_INFO_NM FROM TB_BASE_INFO_ADM BS WHERE BS.BASE_INFO_TYPE = 'FT' AND BS.BASE_INFO_CD = WOFT.FAULTY_TYPE_CD) FAULTY_DTL
				, TEST.FAULTY_QTY_SUM 
			FROM (
				SELECT WORK_ORD_NO, MIDDLE_PRCSS_CD, FAULTY_TYPE_CD, ISNULL(SUM(FAULTY_TYPE_QTY), 0) FAULTY_TYPE_QTY, FAULTY_TYPE_DATE 
				FROM TB_WORK_ORDER_FAULTY_TYPE
				GROUP BY WORK_ORD_NO, MIDDLE_PRCSS_CD, FAULTY_TYPE_CD, FAULTY_TYPE_DATE
			) WOFT
			
			LEFT OUTER JOIN TB_WORK_ORDER_PRCSS WOP_TB
			ON WOP_TB.WORK_ORD_NO = WOFT.WORK_ORD_NO
			AND WOP_TB.MIDDLE_PRCSS_CD = WOFT.MIDDLE_PRCSS_CD
			AND WOP_TB.WORK_STATUS = '003'
			
			LEFT OUTER JOIN TB_ITEM_INFO_ADM IIA_TB
			ON WOP_TB.ITEM_SEQ = IIA_TB.ITEM_SEQ
			
			LEFT OUTER JOIN TB_UNFIT_RESULT_ADM URA
			ON WOFT.FAULTY_TYPE_CD = URA.UNFIT_NO
			AND WOP_TB.ORD_LOT_NO = URA.UNFIT_LOT
			
			LEFT OUTER JOIN (
				SELECT T.INSPECT_DATE, T.LOT_NO, T.FAULTY_CD, SUM(T.FAULTY_QTY) FAULTY_QTY_SUM
				FROM (
					SELECT WOP_TB.ORD_DATE INSPECT_DATE, WOP_TB.ORD_LOT_NO LOT_NO, WOFT.FAULTY_TYPE_CD FAULTY_CD, WOFT.FAULTY_TYPE_QTY FAULTY_QTY
					FROM (
						SELECT WORK_ORD_NO, MIDDLE_PRCSS_CD, WORK_ORD_SEQ, FAULTY_TYPE_CD, ISNULL(SUM(FAULTY_TYPE_QTY), 0) FAULTY_TYPE_QTY, FAULTY_TYPE_DATE
						FROM TB_WORK_ORDER_FAULTY_TYPE
						GROUP BY WORK_ORD_NO, MIDDLE_PRCSS_CD, WORK_ORD_SEQ, FAULTY_TYPE_CD, FAULTY_TYPE_DATE
					) WOFT
					LEFT OUTER JOIN TB_WORK_ORDER_PRCSS WOP_TB
					ON WOP_TB.WORK_ORD_NO = WOFT.WORK_ORD_NO
					AND WOP_TB.MIDDLE_PRCSS_CD = WOFT.MIDDLE_PRCSS_CD
					AND WOP_TB.WORK_ORD_SEQ = WOFT.WORK_ORD_SEQ
					AND WOP_TB.WORK_STATUS = '003'
					WHERE 1=1
					GROUP BY WOP_TB.ORD_DATE, WOFT.FAULTY_TYPE_CD, WOP_TB.ORD_LOT_NO, WOFT.FAULTY_TYPE_QTY
					HAVING 1=1
					AND FAULTY_TYPE_QTY > 0
				) T
				WHERE 1=1
				AND T.INSPECT_DATE BETWEEN #{startDate} AND #{endDate}
				GROUP BY T.INSPECT_DATE, T.LOT_NO, T.FAULTY_CD
			) TEST
			ON TEST.INSPECT_DATE = WOP_TB.ORD_DATE
			AND TEST.LOT_NO = WOP_TB.ORD_LOT_NO
			AND TEST.FAULTY_CD = WOFT.FAULTY_TYPE_CD
			
			WHERE 1=1
			AND WOP_TB.ORD_DATE BETWEEN #{startDate} AND #{endDate}
			AND WOFT.FAULTY_TYPE_QTY > 0
			AND IIA_TB.MAIN_GUBUN = #{mainGubun}
			<if test="itemSeq != null and !itemSeq.equals('')">
			AND IIA_TB.ITEM_SEQ = #{itemSeq}
			</if>
			<if test="itemCus != null and !itemCus.equals('')">
			AND IIA_TB.ITEM_CUS = #{itemCus}
			</if>
			<if test="unfitResultNo != null and !unfitResultNo.equals('')">
			AND IIF(URA.UNFIT_RESULT_NO IS NOT NULL, '등록', '미등록') = #{unfitResultNo}
			</if>
			<if test="unfitProc != null and !unfitProc.equals('')">
			AND URA.UNFIT_PROC = #{unfitProc}
			</if>
			
			GROUP BY
				WOP_TB.ORD_DATE
				, IIA_TB.ITEM_CD
				, IIA_TB.ITEM_NM
				, IIA_TB.ITEM_SEQ
				, WOP_TB.ORD_LOT_NO 
				, WOFT.FAULTY_TYPE_CD
				, TEST.FAULTY_QTY_SUM 
			HAVING 1=1
			AND WOFT.FAULTY_TYPE_CD=#{faultyCd}
		) T
		GROUP BY T.ITEM_CD, T.ITEM_NM, T.ITEM_SEQ, T.FAULTY_CD, T.FAULTY_DTL
		
		ORDER BY T.ITEM_NM ASC
	</select>
	
	<!-- 부적합관리대장(봉제) - 단품불량 우측 불량유형별 품명 조회 -->
	<select id="unfitFaultyRight004List" resultMap="UnfitAdmVo">
		SELECT 
			T.ITEM_CD
			, T.ITEM_NM
			, T.ITEM_SEQ
			, T.FAULTY_CD
			, T.FAULTY_DTL
			, SUM(T.FAULTY_QTY_SUM) FAULTY_QTY
		FROM (
			SELECT
				WSIF.FAULTY_DATE INSPECT_DATE
				, WSIF.FAULTY_TYPE FAULTY_CD
				, IIA.ITEM_SEQ
				, IIA.ITEM_CD
				, IIA.ITEM_NM
				, (SELECT BS.BASE_INFO_NM FROM TB_BASE_INFO_ADM BS WHERE BS.BASE_INFO_TYPE = 'FT' AND BS.BASE_INFO_CD = WSIF.FAULTY_TYPE) FAULTY_DTL
				, WSIF.BARCODE_NO LOT_NO
				, WSIF_SUB.FAULTY_QTY_SUM
			FROM (
				SELECT FAULTY_DATE, FAULTY_TYPE, WORK_ORD_NO,BARCODE_NO, WORK_PROG_NO, ITEM_SEQ, SUM(FAULTY_QTY) FAULTY_QTY
				FROM TB_WORK_SINGLE_ITEM_FAULTY
				GROUP BY FAULTY_DATE, FAULTY_TYPE, WORK_ORD_NO, BARCODE_NO, WORK_PROG_NO, ITEM_SEQ
			) WSIF
			
			LEFT OUTER JOIN TB_ITEM_INFO_ADM IIA
			ON WSIF.ITEM_SEQ = IIA.ITEM_SEQ
			
			LEFT OUTER JOIN TB_UNFIT_RESULT_ADM URA
			ON WSIF.FAULTY_TYPE = URA.UNFIT_NO
			AND WSIF.BARCODE_NO = URA.UNFIT_LOT
			
			LEFT OUTER JOIN (
				SELECT FAULTY_DATE, BARCODE_NO, FAULTY_TYPE, SUM(FAULTY_QTY) FAULTY_QTY_SUM
				FROM TB_WORK_SINGLE_ITEM_FAULTY
				GROUP BY FAULTY_DATE, FAULTY_TYPE, BARCODE_NO
			) WSIF_SUB
			ON WSIF.FAULTY_DATE = WSIF_SUB.FAULTY_DATE
			AND WSIF.BARCODE_NO = WSIF_SUB.BARCODE_NO
			AND WSIF.FAULTY_TYPE = WSIF_SUB.FAULTY_TYPE
			
			WHERE 1=1
			<if test="startDate != null and !startDate.equals('')">
			AND  WSIF.FAULTY_DATE BETWEEN  #{startDate} AND #{endDate}
			AND  WSIF.FAULTY_QTY > 0
			</if>
			<if test="mainGubun != null and !mainGubun.equals('')">
			AND IIA.MAIN_GUBUN = #{mainGubun}
			</if>
			<if test="itemSeq != null and !itemSeq.equals('')">
			AND IIA.ITEM_SEQ = #{itemSeq}
			</if>
			<if test="itemCus != null and !itemCus.equals('')">
			AND IIA.ITEM_CUS = #{itemCus}
			</if>
			<if test="unfitResultNo != null and !unfitResultNo.equals('')">
			AND IIF(URA.UNFIT_RESULT_NO IS NOT NULL, '등록', '미등록') = #{unfitResultNo}
			</if>
			<if test="unfitProc != null and !unfitProc.equals('')">
			AND URA.UNFIT_PROC = #{unfitProc}
			</if>
			
			GROUP BY
				WSIF.FAULTY_DATE
				, IIA.ITEM_SEQ
				, IIA.ITEM_CD
				, IIA.ITEM_NM
				, WSIF.FAULTY_TYPE
				, WSIF_SUB.FAULTY_QTY_SUM
				, WSIF.BARCODE_NO
			HAVING 1=1
			AND WSIF.FAULTY_TYPE = #{faultyCd}
		) T
		GROUP BY T.ITEM_CD, T.ITEM_NM, T.ITEM_SEQ, T.FAULTY_CD, T.FAULTY_DTL
		
		ORDER BY T.ITEM_NM ASC
	</select>
	
	<!-- 부적합창고현황 메인 조회 -->
	<select id="stockPaymentUnfitList" resultMap="UnfitAdmVo">
	 	SELECT
			DD.MAIN_GUBUN
			, (SELECT BASE_NM FROM TB_COMMON_CODE_ADM B WHERE BASE_GROUP_CD = '112' AND DD.MAIN_GUBUN = B.BASE_CD) MAIN_GUBUN_NM
			, DD.ITEM_SEQ
		    , DD.ITEM_CD SP_CD
			, DD.ITEM_NM SP_NM
			, DD.ITEM_GUBUN SP_TYPE
			, (SELECT BASE_NM FROM TB_COMMON_CODE_ADM B WHERE BASE_GROUP_CD = '091' AND DD.ITEM_GUBUN = B.BASE_CD) SP_TYPE_NM
			, DD.ITEM_MODEL
			, (SELECT BASE_NM FROM TB_COMMON_CODE_ADM B WHERE BASE_GROUP_CD = '099' AND DD.ITEM_MODEL = B.BASE_CD) ITEM_MODEL_NM
			, DD.ITEM_COLOR
			, DD.ITEM_MAKER
			, DD.LOC_NO LOCATION_NO
			, L.LOC_CD LOCATION_CD
			, (SELECT BASE_NM FROM TB_COMMON_CODE_ADM B WHERE BASE_GROUP_CD = '073' AND B.BASE_CD=L.LOC_CD ) LOCATION_NM
			, L.AREA_CD
			, (SELECT BASE_NM FROM TB_COMMON_CODE_ADM B WHERE BASE_GROUP_CD = '067' AND B.BASE_CD=L.AREA_CD) AREA_NM
			, L.FLOOR_NM
			, DD.ITEM_CUS
			, (SELECT BASE_NM FROM TB_COMMON_CODE_ADM X WHERE X.BASE_CD=DD.ITEM_UNIT AND X.BASE_GROUP_CD='036') SP_UNIT
			, SUM(ISNULL(EE.TM_QTY, 0)) TM_QTY
			, SUM(ISNULL(EE.IN_QTY, 0)) IN_QTY
			, SUM(ISNULL(EE.OUT_QTY, 0)) OUT_QTY
			, SUM(ISNULL(EE.REAL_QTY, 0)) REAL_QTY
			, FORMAT(CONVERT(FLOAT, ISNULL(
				CASE WHEN DD.ITEM_GUBUN IN ('001', '002') THEN
				(SELECT TOP(1) X.EXPORT_COST FROM TB_ITEM_COST_LIST X WHERE X.ITEM_SEQ = DD.ITEM_SEQ AND X.EXPORT_DATE <![CDATA[<=]]> (#{tmMon}+'31') ORDER BY X.EXPORT_DATE DESC, X.REG_DATE DESC)
				ELSE
				(SELECT TOP(1) X.IMPORT_COST FROM TB_ITEM_COST_LIST X WHERE X.ITEM_SEQ = DD.ITEM_SEQ AND X.IMPORT_DATE <![CDATA[<=]]> (#{tmMon}+'31') ORDER BY X.IMPORT_DATE DESC, X.REG_DATE DESC)
				END
				, 0)), '#,##0.##') ITEM_COST
			, FORMAT((ISNULL(SUM(ISNULL(EE.REAL_QTY, 0)), 0) * ISNULL(
				CASE WHEN DD.ITEM_GUBUN IN ('001', '002') THEN
				(SELECT TOP(1) X.EXPORT_COST FROM TB_ITEM_COST_LIST X WHERE X.ITEM_SEQ = DD.ITEM_SEQ AND X.EXPORT_DATE <![CDATA[<=]]> (#{tmMon}+'31') ORDER BY X.EXPORT_DATE DESC, X.REG_DATE DESC)
				ELSE
				(SELECT TOP(1) X.IMPORT_COST FROM TB_ITEM_COST_LIST X WHERE X.ITEM_SEQ = DD.ITEM_SEQ AND X.IMPORT_DATE <![CDATA[<=]]> (#{tmMon}+'31') ORDER BY X.IMPORT_DATE DESC, X.REG_DATE DESC)
				END
				, 0)), '#,##0.##') REAL_QTY_COST
		FROM TB_ITEM_INFO_ADM DD LEFT OUTER JOIN (
			SELECT
				SP_TYPE
				, SP_CD
				, BARCODE_NO
				, LOCATION_NO
				, LOCATION_CD
				, SUM(BINPUT) TM_QTY
				, SUM(AINPUT) IN_QTY
				, SUM(AOUTPUT) OUT_QTY
				, SUM(BINPUT)+SUM(AINPUT)-SUM(AOUTPUT) REAL_QTY
			FROM (
				SELECT
					SP_TYPE
					, SP_CD
					, BARCODE_NO
					, LOCATION_NO
					, LOCATION_CD
					, ISNULL(CASE WHEN DATE_GUBUN = 'BEFORE' THEN SUM(INPUT-OUTPUT) END, 0) BINPUT
					, ISNULL(CASE WHEN DATE_GUBUN = 'AFTER' THEN SUM(INPUT) END, 0) AINPUT
					, ISNULL(CASE WHEN DATE_GUBUN = 'AFTER' THEN SUM(OUTPUT) END, 0) AOUTPUT
				FROM (
					SELECT
						SP_TYPE
						, SP_CD
						, SP_DATE
						, BARCODE_NO
						, LOCATION_NO
						, LOCATION_CD
						, (
							CASE WHEN AA.SP_DATE <![CDATA[<]]> #{tmMon} + '01' 
							THEN 'BEFORE'
							WHEN  AA.SP_DATE <![CDATA[>=]]> #{tmMon} + '01' AND SP_DATE <![CDATA[<=]]> #{tmMon} + '31'
							THEN 'AFTER'
							END
						) DATE_GUBUN
						, SUM(CASE WHEN SP_GUBUN = '001' THEN SP_QTY ELSE 0 END) INPUT
						, SUM(CASE WHEN SP_GUBUN = '002' THEN SP_QTY ELSE 0 END) OUTPUT
					FROM (
						SELECT
							SP_NO
							, SP_SEQ
							, SP_TYPE
							, SP_CD
							, SP_GUBUN
							, SP_DATE
							, SP_QTY
							, SP_BOM_QTY
							, BARCODE_NO
							, SOURCE_NO
							, LOCATION_CD
							, AREA_CD
							, FLOOR_CD
							, LOCATION_NO
						FROM TB_STOCK_PAYMENT_ADM
						WHERE 1=1
						AND LOCATION_CD IN ('018', '023') --부적합관리(봉제, 사출) 창고 코드
						AND SP_DATE BETWEEN LEFT(#{tmMon},4)+'0101' AND #{tmMon} + '31'
						UNION ALL
						SELECT
							SP_NO
							, SP_SEQ
							, SP_TYPE
							, SP_CD
							, SP_GUBUN
							, SP_DATE
							, SP_QTY
							, SP_BOM_QTY
							, BARCODE_NO
							, SOURCE_NO
							, LOCATION_CD
							, AREA_CD
							, FLOOR_CD
							, LOCATION_NO
						FROM TB_STOCK_CLOSING_ADM
						WHERE 1=1
						AND LOCATION_CD IN ('018', '023') --부적합관리(봉제, 사출) 창고 코드
						AND CLOSE_DATE = CONVERT(VARCHAR(4), DATEADD(YYYY, -1, #{tmMon} + '01'), 112)
					) AA
					GROUP BY
						SP_TYPE
						, SP_CD
						, SP_DATE
						, BARCODE_NO
						, LOCATION_NO
						, LOCATION_CD
						, (
							CASE WHEN  AA.SP_DATE <![CDATA[<]]> #{tmMon} + '01'
							THEN 'BEFORE'
							WHEN AA.SP_DATE <![CDATA[>=]]> #{tmMon} + '01' AND AA.SP_DATE <![CDATA[<=]]> #{tmMon} + '31'
							THEN 'AFTER'
							END
						)
				) BB
				GROUP BY SP_TYPE, SP_CD,BARCODE_NO,LOCATION_NO,LOCATION_CD,DATE_GUBUN
			) CC
			GROUP BY SP_TYPE, SP_CD,BARCODE_NO,LOCATION_NO,LOCATION_CD
		) EE
		ON DD.ITEM_SEQ = EE.SP_CD
		LEFT OUTER JOIN TB_LOCATION_ADM L
		ON DD.LOC_NO = L.LOC_NO

		WHERE 1=1
		<if test="mainGubun != null and !mainGubun.equals('')">
		AND DD.MAIN_GUBUN = #{mainGubun}
		</if>
		<if test="itemCus != null and !itemCus.equals('')">
		AND DD.ITEM_CUS = #{itemCus}
		</if>
		<if test="realQtyOption!=null and !realQtyOption.equals('')">
		AND ROUND(REAL_QTY, 0) <![CDATA[>]]> 0
		</if>
		
		GROUP BY
			DD.MAIN_GUBUN
			,DD.ITEM_SEQ
		    , DD.ITEM_CD
			, DD.ITEM_NM 
			, DD.ITEM_GUBUN 
			, DD.ITEM_MODEL
			, DD.ITEM_COLOR
			, DD.ITEM_MAKER
			, DD.ITEM_UNIT
			, DD.ITEM_CUS
			, DD.LOC_NO 
			, L.LOC_CD 
			, L.AREA_CD
			, L.FLOOR_NM
	</select>

	<!-- 부적합창고현황 창고별 조회 -->
	<select id="stockPaymentUnfitLocList" resultMap="UnfitAdmVo">
		SELECT
			DD.MAIN_GUBUN
			, (SELECT BASE_NM FROM TB_COMMON_CODE_ADM B WHERE BASE_GROUP_CD = '112' AND DD.MAIN_GUBUN = B.BASE_CD) MAIN_GUBUN_NM
			, DD.ITEM_SEQ
			, EE.LOCATION_CD
			, (SELECT BASE_NM FROM TB_COMMON_CODE_ADM B WHERE BASE_GROUP_CD = '073' AND B.BASE_CD=EE.LOCATION_CD )LOCATION_NM
		    , DD.ITEM_CD SP_CD
			, DD.ITEM_NM SP_NM
			, SUM(ISNULL(EE.TM_QTY, 0)) TM_QTY
			, SUM(ISNULL(EE.IN_QTY, 0)) IN_QTY
			, SUM(ISNULL(EE.OUT_QTY, 0)) OUT_QTY
			, SUM(ISNULL(EE.REAL_QTY, 0)) REAL_QTY
		FROM TB_ITEM_INFO_ADM DD LEFT OUTER JOIN (
			SELECT
				SP_TYPE
				, SP_CD
				, BARCODE_NO
				, LOCATION_CD
				, SUM(BINPUT) TM_QTY
				, SUM(AINPUT) IN_QTY
				, SUM(AOUTPUT) OUT_QTY
				, SUM(BINPUT)+SUM(AINPUT)-SUM(AOUTPUT) REAL_QTY
			FROM (
				SELECT
					SP_TYPE
					, SP_CD
					, BARCODE_NO
					, LOCATION_CD
					, ISNULL(CASE WHEN DATE_GUBUN = 'BEFORE' THEN SUM(INPUT-OUTPUT) END, 0) BINPUT
					, ISNULL(CASE WHEN DATE_GUBUN = 'AFTER' THEN SUM(INPUT) END, 0) AINPUT
					, ISNULL(CASE WHEN DATE_GUBUN = 'AFTER' THEN SUM(OUTPUT) END, 0) AOUTPUT
				FROM (
					SELECT
						SP_TYPE
						, SP_CD
						, SP_DATE
						, BARCODE_NO
						, LOCATION_CD
						, (
							CASE WHEN AA.SP_DATE <![CDATA[<]]> #{tmMon} + '01' 
							THEN 'BEFORE'
							WHEN  AA.SP_DATE <![CDATA[>=]]> #{tmMon} + '01' AND SP_DATE <![CDATA[<=]]> #{tmMon} + '31'
							THEN 'AFTER'
							END
						) DATE_GUBUN
						, SUM(CASE WHEN SP_GUBUN = '001' THEN SP_QTY ELSE 0 END) INPUT
						, SUM(CASE WHEN SP_GUBUN = '002' THEN SP_QTY ELSE 0 END) OUTPUT
					FROM (
						SELECT
							SP_NO
							, SP_SEQ
							, SP_TYPE
							, SP_CD
							, SP_GUBUN
							, SP_DATE
							, SP_QTY
							, SP_BOM_QTY
							, BARCODE_NO
							, SOURCE_NO
							, LOCATION_CD
							, AREA_CD
							, FLOOR_CD
							, LOCATION_NO
						FROM TB_STOCK_PAYMENT_ADM
						WHERE 1=1
						AND LOCATION_CD IN ('018', '023')
						<if test="spType != null and !spType.equals('')">
							AND SP_TYPE = #{spType}
						</if>
						AND SP_DATE BETWEEN LEFT(#{tmMon},4)+'0101' AND #{tmMon} + '31'
						UNION ALL
						SELECT
							SP_NO
							, SP_SEQ
							, SP_TYPE
							, SP_CD
							, SP_GUBUN
							, SP_DATE
							, SP_QTY
							, SP_BOM_QTY
							, BARCODE_NO
							, SOURCE_NO
							, LOCATION_CD
							, AREA_CD
							, FLOOR_CD
							, LOCATION_NO
						FROM TB_STOCK_CLOSING_ADM
						WHERE 1=1
						AND LOCATION_CD IN ('018', '023')
						<if test="spType != null and !spType.equals('')">
							AND SP_TYPE = #{spType}
						</if>
						AND CLOSE_DATE = CONVERT(VARCHAR(4), DATEADD(YYYY, -1, #{tmMon} + '01'), 112)
					) AA
					GROUP BY
						SP_TYPE
						, SP_CD
						, SP_DATE
						, BARCODE_NO
						, LOCATION_NO
						, LOCATION_CD
						, (
							CASE WHEN  AA.SP_DATE <![CDATA[<]]> #{tmMon} + '01'
							THEN 'BEFORE'
							WHEN AA.SP_DATE <![CDATA[>=]]> #{tmMon} + '01' AND AA.SP_DATE <![CDATA[<=]]> #{tmMon} + '31'
							THEN 'AFTER'
							END
						)
				) BB
				GROUP BY SP_TYPE, SP_CD,BARCODE_NO,LOCATION_CD,DATE_GUBUN
			) CC
			GROUP BY SP_TYPE, SP_CD,BARCODE_NO,LOCATION_CD
		) EE
		ON DD.ITEM_SEQ = EE.SP_CD
		WHERE 1=1
		<if test="realQtyOption != null and !realQtyOption.equals('')">
			AND REAL_QTY > 0
		</if>
		<if test="mainGubun != null and !mainGubun.equals('')">
			AND MAIN_GUBUN = #{mainGubun}
		</if>
		<if test="itemSeq != null and !itemSeq.equals('')">
			AND ITEM_SEQ = #{itemSeq}
		</if>
		GROUP BY	
			DD.ITEM_SEQ
			, EE.LOCATION_CD
			, DD.ITEM_CD 
			, DD.ITEM_NM 
			, DD.MAIN_GUBUN
	</select>
	
	<!-- 부적합창고현황 바코드별 조회 -->
	<select id="stockPaymentUnfitBarcodeList" resultMap="UnfitAdmVo">
		SELECT
			DD.ITEM_SEQ
			, EE.BARCODE_NO
		    , DD.ITEM_CD SP_CD
			, DD.ITEM_NM SP_NM
			, DD.ITEM_UNIT
			, DD.ITEM_UNIT_NM SP_UNIT
			, ISNULL(EE.TM_QTY, 0) TM_QTY
			, ISNULL(EE.IN_QTY, 0) IN_QTY
			, ISNULL(EE.OUT_QTY, 0) OUT_QTY
			, ISNULL(EE.REAL_QTY, 0) REAL_QTY
			, URA_TB.UNFIT_FAULTY_DATE
			, URA_TB.FAULTY_DTL
		FROM (
			SELECT
				Z.ITEM_SEQ
				, Z.ITEM_CD
				, Z.ITEM_NM
				, Z.ITEM_UNIT
				, (SELECT BASE_NM FROM TB_COMMON_CODE_ADM X WHERE X.BASE_CD=ITEM_UNIT AND X.BASE_GROUP_CD='036') ITEM_UNIT_NM
			FROM TB_ITEM_INFO_ADM Z
			WHERE 1=1
			AND USE_YN = '001'
		) DD
		
		LEFT OUTER JOIN (
			SELECT
				SP_TYPE
				, SP_CD
				, BARCODE_NO
				, SUM(BINPUT) TM_QTY
				, SUM(AINPUT) IN_QTY
				, SUM(AOUTPUT) OUT_QTY
				, SUM(BINPUT)+SUM(AINPUT)-SUM(AOUTPUT) REAL_QTY
			FROM (
				SELECT
					SP_TYPE
					, SP_CD
					, BARCODE_NO
					, ISNULL(CASE WHEN DATE_GUBUN = 'BEFORE' THEN SUM(INPUT-OUTPUT) END, 0) BINPUT
					, ISNULL(CASE WHEN DATE_GUBUN = 'AFTER' THEN SUM(INPUT) END, 0) AINPUT
					, ISNULL(CASE WHEN DATE_GUBUN = 'AFTER' THEN SUM(OUTPUT) END, 0) AOUTPUT
				FROM (
					SELECT
						SP_TYPE
						, SP_CD
						, SP_DATE
						, BARCODE_NO
						, (
							CASE WHEN AA.SP_DATE <![CDATA[<]]> #{tmMon} + '01' 
							THEN 'BEFORE'
							WHEN  AA.SP_DATE <![CDATA[>=]]> #{tmMon} + '01' AND SP_DATE <![CDATA[<=]]> #{tmMon} + '31'
							THEN 'AFTER'
							END
						) DATE_GUBUN
						, SUM(CASE WHEN SP_GUBUN = '001' THEN SP_QTY ELSE 0 END) INPUT
						, SUM(CASE WHEN SP_GUBUN = '002' THEN SP_QTY ELSE 0 END) OUTPUT
					FROM (
						SELECT
							SP_NO
							, SP_SEQ
							, SP_TYPE
							, SP_CD
							, SP_GUBUN
							, SP_DATE
							, SP_QTY
							, SP_BOM_QTY
							, BARCODE_NO
							, SOURCE_NO
							, LOCATION_CD
							, AREA_CD
							, FLOOR_CD
							, LOCATION_NO
						FROM TB_STOCK_PAYMENT_ADM
						WHERE 1=1
						AND LOCATION_CD IN ('018', '023') --부적합관리(봉제, 사출) 창고 코드
						AND SP_DATE BETWEEN LEFT(#{tmMon},4)+'0101' AND #{tmMon} + '31'
					) AA
					GROUP BY
						SP_TYPE
						, SP_CD
						, SP_DATE
						, BARCODE_NO
						, LOCATION_NO
						, LOCATION_CD
						, (
							CASE WHEN  AA.SP_DATE <![CDATA[<]]> #{tmMon} + '01'
							THEN 'BEFORE'
							WHEN AA.SP_DATE <![CDATA[>=]]> #{tmMon} + '01' AND AA.SP_DATE <![CDATA[<=]]> #{tmMon} + '31'
							THEN 'AFTER'
							END
						)
				) BB
				GROUP BY SP_TYPE, SP_CD, BARCODE_NO, DATE_GUBUN
			) CC
			GROUP BY SP_TYPE, SP_CD,BARCODE_NO
		) EE
		ON DD.ITEM_SEQ = EE.SP_CD
		
		LEFT OUTER JOIN (
			SELECT
				UNFIT_LOT
				, UNFIT_FAULTY_DATE
				, UNFIT_GUBUN
				, STUFF((
					SELECT ', ' + BASE_INFO_NM
	            	FROM TB_UNFIT_RESULT_ADM URA_TB
	            	INNER JOIN TB_BASE_INFO_ADM X ON X.BASE_INFO_TYPE = 'FT' AND X.BASE_INFO_CD = URA_TB.UNFIT_NO
	            	WHERE URA_TB.UNFIT_LOT = A.UNFIT_LOT
	            	FOR XML PATH('')
	            ), 1, 2, '') FAULTY_DTL
			FROM TB_UNFIT_RESULT_ADM A
			GROUP BY UNFIT_LOT, UNFIT_FAULTY_DATE, UNFIT_GUBUN
		) URA_TB
		ON EE.BARCODE_NO = URA_TB.UNFIT_LOT
		
		WHERE 1=1
		<if test="realQtyOption != null and !realQtyOption.equals('')">
		AND EE.REAL_QTY > 0
		</if>
		<if test="itemSeq != null and !itemSeq.equals('')">
		AND DD.ITEM_SEQ = #{itemSeq}
		</if>
		<if test='unfitGubun != null and !unfitGubun.equals("")'>
		AND URA_TB.UNFIT_GUBUN = #{unfitGubun}
		</if>
	</select>
	
</mapper>
